{"version":3,"sources":["../../src/utils/pubkeys.ts","../../src/context/TokenList.tsx","../../src/context/Sollet.tsx","../../src/utils/tokens.ts","../../src/context/Token.tsx","../../src/context/Dex.tsx","../../src/context/Swap.tsx","../../src/components/TokenDialog.tsx","../../src/components/OpenOrdersDialog.tsx","../../src/components/Settings.tsx","../../src/components/Info.tsx","../../src/components/Swap.tsx","../../src/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEX_PID","PublicKey","SRM_MINT","USDC_MINT","USDT_MINT","SOL_MINT","WRAPPED_SOL_MINT","WORM_MARKET_BASE","WORM_USDC_MINT","WORM_USDC_MARKET","WORM_USDT_MINT","WORM_USDT_MARKET","_TokenListContext","React","createContext","SPL_REGISTRY_SOLLET_TAG","SPL_REGISTRY_WORM_TAG","SOL_TOKEN_INFO","chainId","address","toString","name","decimals","symbol","logoURI","tags","extensions","website","serumV3Usdc","serumV3Usdt","coingeckoId","waterfallbot","TokenListContextProvider","props","tokenList","useMemo","list","filterByClusterSlug","getList","push","tokenMap","Map","forEach","t","set","swappableTokens","tokens","filter","sort","a","b","includes","map","swappableTokensSollet","solletMap","swappableTokensWormhole","wormholeMap","Provider","value","children","useTokenListContext","ctx","useContext","Error","useTokenMap","fetchSolletInfo","mint","undefined","info","_SOLLET_INFO_CACHE","get","swapApiRequest","infoRaw","splMint","requestWormholeSwapMarketIfNeeded","connection","solletMint","wormholeMint","swapMarket","solletInfo","cached","_SWAP_MARKET_EXISTS_CACHE","getAccountInfo","ticker","catch","console","error","method","path","body","params","headers","cache","JSON","stringify","fetch","resp","handleSwapApiResponse","json","success","SwapApiError","status","result","msg","publicKey","filters","getOwnedAccountsFilters","_rpcRequest","TOKEN_PROGRAM_ID","toBase58","commitment","message","accs","pubkey","account","data","executable","owner","lamports","accountInfo","bs58","every","dataSize","length","memcmp","filterBytes","bytes","slice","offset","equals","parseTokenAccountData","Promise","all","ta","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","ata","ACCOUNT_LAYOUT","BufferLayout","decode","amount","BN","offsetOf","span","_TokenContext","TokenContextProvider","provider","useState","setRefresh","useEffect","wallet","_OWNED_TOKEN_ACCOUNTS_CACHE","r","getOwnedAssociatedTokenAccounts","then","acc","useTokenContext","useOwnedTokenAccount","tokenAccounts","tokenAccount","isSol","listener","onAccountChange","token","index","indexOf","assert","removeAccountChangeListener","useMint","asyncMintInfo","useAsync","_MINT_CACHE","mintClient","Account","mintInfo","getMintInfo","FEE_MULTIPLIER","_DexContext","DexContextProvider","ooAccounts","setOoAccounts","swapClient","closeOpenOrders","openOrder","newOoAccounts","openOrders","market","oo","delete","program","OpenOrders","findForOwner","markets","Set","add","size","anchor","rpc","getMultipleAccounts","Array","from","values","m","multipleMarkets","marketClients","programAccount","Market","getLayout","opts","mintPubkeys","baseMintAddress","quoteMintAddress","flat","pk","mints","mintInfos","MintLayout","resolve","baseMintInfo","quoteMintInfo","_baseSplTokenDecimals","_quoteSplTokenDecimals","_MARKET_CACHE","useDexContext","useOpenOrders","useMarket","asyncMarket","marketClient","load","useBbo","orderbook","refresh","asyncOrderbook","_ORDERBOOK_CACHE","loadBids","loadAsks","bids","asks","bidsAddress","OrderbookSide","oldBestBid","items","next","newBestBid","price","asksAddress","oldBestOffer","newBestOffer","useOrderbook","bestBid","bestOffer","mid","useRoute","fromMint","toMint","route","useRouteVerbose","asyncRoute","wormholeSwapMarket","wormholeMarket","kind","WORMHOLE_NATIVE_MAP","wormKey","first","second","conn","wormholeNativeMarket","wormholeSolletMarket","fromWormhole","isFromWormhole","toWormhole","isToWormhole","fromSollet","isFromSollet","toSollet","isToSollet","base","quote","wormholeInfo","erc20Contract","deriveWormholeMarket","baseMint","quoteMint","version","log","padToTwo","n","seed","createWithSeed","_SwapContext","SwapContextProvider","setFromMint","setToMint","fromAmount","_setFromAmount","toAmount","_setToAmount","isClosingNewAccounts","setIsClosingNewAccounts","isStrict","setIsStrict","slippage","setSlippage","fairOverride","setFairOverride","fair","_useSwapFair","referral","setFromAmount","setToAmount","swapToFromMints","oldFrom","oldTo","useSwapContext","useSwapFair","fairRoute","fromBbo","fromMarket","toBbo","useFairRoute","useStyles","makeStyles","theme","dialogContent","padding","textField","marginBottom","tab","minWidth","tabSelected","color","palette","primary","contrastText","fontWeight","backgroundColor","main","borderRadius","tabIndicator","opacity","TokenDialog","open","onClose","setMint","tabSelection","setTabSelection","tokenFilter","setTokenFilter","toLowerCase","styles","useSwappableTokens","displayTabs","useMediaQuery","selectedTokens","startsWith","Dialog","scroll","PaperProps","style","width","DialogTitle","Typography","variant","paddingBottom","TextField","className","placeholder","fullWidth","onChange","e","target","DialogContent","dividers","List","disablePadding","tokenInfo","TokenListItem","onClick","DialogActions","Tabs","v","classes","indicator","Tab","selected","label","ListItem","button","TokenIcon","TokenName","marginLeft","fontSize","table","closeAccount","OpenOrdersDialog","maxWidth","display","justifyContent","IconButton","Close","paddingTop","OpenOrdersAccounts","openOrdersEntries","entries","TableContainer","component","Paper","elevation","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","oos","OpenOrdersRow","ooAccount","setOoAccount","baseWallet","quoteWallet","baseTicker","quoteTicker","marketName","settleDisabled","baseTokenFree","toNumber","quoteTokenFree","closeDisabled","baseTokenTotal","quoteTokenTotal","settleFunds","makeSettleFundsTransaction","transaction","signers","send","_closeOpenOrders","accounts","authority","destination","dexProgram","scope","Link","href","rel","Select","MenuItem","toDisplay","sub","Button","disabled","toFixed","settingsButton","closeAccountSwitchLabel","text","secondary","fairAutoSelected","fairAuto","type","light","boxShadow","SettingsButton","popupState","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","SettingsDetails","showSettingsDialog","setShowSettingsDialog","marginTop","parseFloat","flexDirection","InputProps","endAdornment","InputAdornment","position","marginRight","flex","margin","CloseNewAccountsSwitch","FormGroup","row","FormControlLabel","labelPlacement","control","Switch","checked","infoLabel","alignItems","infoButton","InfoLabel","fromMintInfo","fromTokenInfo","toTokenInfo","InfoButton","Info","disableRestoreFocus","InfoDetails","addresses","MarketRoute","overflow","useMarketName","bbo","card","spacing","swapButton","swapToFromButton","cursor","amountInput","input","textAlign","swapTokenFormContainer","swapTokenSelectorContainer","balanceContainer","maxButton","tokenButton","SwapCard","containerStyle","contentStyle","swapTokenContainerStyle","Card","SwapHeader","SwapFromForm","ArrowButton","SwapToForm","SwapButton","useTheme","ImportExportRounded","htmlColor","SwapTokenForm","setAmount","showTokenDialog","setShowTokenDialog","mintAccount","balance","formattedAmount","toLocaleString","maximumFractionDigits","useGrouping","TokenButton","disableUnderline","root","ExpandMore","alt","src","toMintInfo","toMarket","canSwap","fromWallet","useCanSwap","asyncReferral","useReferral","toWallet","sendSwapTransaction","wrappedSolAccount","Keypair","generate","minExchangeRate","rate","muln","divn","fromDecimals","quoteDecimals","strict","fromOpenOrders","toOpenOrders","fromWalletAddr","toWalletAddr","swapTxs","close","txs","wrapSol","wrapTx","tx","wrapSigners","unwrapSol","unwrapTx","unwrapSigners","Transaction","sendAll","SystemProgram","getMinBalanceRentForExemptAccount","fromPubkey","newAccountPubkey","space","programId","createAccount","transfer","toPubkey","createInitAccountInstruction","createCloseAccountInstruction","Swap","materialTheme","SwapClient","createMuiTheme","ThemeProvider","minHeight","paddingLeft","paddingRight","AppInner","enqueueSnackbar","useSnackbar","isConnected","setIsConnected","setTokenList","preflightCommitment","network","Wallet","Connection","NotifyingProvider","err","action","TokenListProvider","on","Grid","container","justify","disconnect","connect","right","top","onTransaction","txSig","this","txSigs","sig","App","maxSnack","autoHideDuration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ca42d81.chunk.js","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\r\n\r\nexport const DEX_PID = new PublicKey(\r\n  \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\"\r\n);\r\n\r\nexport const SRM_MINT = new PublicKey(\r\n  \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"\r\n);\r\n\r\nexport const USDC_MINT = new PublicKey(\r\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\r\n);\r\n\r\nexport const USDT_MINT = new PublicKey(\r\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"\r\n);\r\n\r\n// Arbitrary mint to represent SOL (not wrapped SOL).\r\nexport const SOL_MINT = new PublicKey(\r\n  \"Ejmc1UB4EsES5oAaRN63SpoxMJidt3ZGBrqrZk49vjTZ\"\r\n);\r\n\r\nexport const WRAPPED_SOL_MINT = new PublicKey(\r\n  \"So11111111111111111111111111111111111111112\"\r\n);\r\n\r\nexport const WORM_MARKET_BASE = new PublicKey(\r\n  \"6a9wpsZpZGxGhFVSQBpcTNjNjytdbSA1iUw1A5KNDxPw\"\r\n);\r\n\r\nexport const WORM_USDC_MINT = new PublicKey(\r\n  \"FVsXUnbhifqJ4LiXQEbpUtXVdB8T5ADLKqSs5t1oc54F\"\r\n);\r\n\r\nexport const WORM_USDC_MARKET = new PublicKey(\r\n  \"6nGMps9VfDjkKEwYjdSNqN1ToXkLae4VsN49fzBiDFBd\"\r\n);\r\n\r\nexport const WORM_USDT_MINT = new PublicKey(\r\n  \"9w97GdWUYYaamGwdKMKZgGzPduZJkiFizq4rz5CPXRv2\"\r\n);\r\n\r\nexport const WORM_USDT_MARKET = new PublicKey(\r\n  \"4v6e6vNXAaEunrvbqkYnKwbaWfck8a2KVR4uRAVXxVwC\"\r\n);\r\n","import React, { useContext, useMemo } from \"react\";\r\nimport { TokenInfo } from \"@solana/spl-token-registry\";\r\nimport { SOL_MINT } from \"../utils/pubkeys\";\r\n\r\ntype TokenListContext = {\r\n  tokenMap: Map<string, TokenInfo>;\r\n  wormholeMap: Map<string, TokenInfo>;\r\n  solletMap: Map<string, TokenInfo>;\r\n  swappableTokens: TokenInfo[];\r\n  swappableTokensSollet: TokenInfo[];\r\n  swappableTokensWormhole: TokenInfo[];\r\n};\r\nconst _TokenListContext = React.createContext<null | TokenListContext>(null);\r\n\r\n// Tag in the spl-token-registry for sollet wrapped tokens.\r\nexport const SPL_REGISTRY_SOLLET_TAG = \"wrapped-sollet\";\r\n\r\n// Tag in the spl-token-registry for wormhole wrapped tokens.\r\nexport const SPL_REGISTRY_WORM_TAG = \"wormhole\";\r\n\r\nconst SOL_TOKEN_INFO = {\r\n  chainId: 101,\r\n  address: SOL_MINT.toString(),\r\n  name: \"Native SOL\",\r\n  decimals: \"9\",\r\n  symbol: \"SOL\",\r\n  logoURI:\r\n    \"https://cdn.jsdelivr.net/gh/trustwallet/assets@master/blockchains/solana/info/logo.png\",\r\n  tags: [],\r\n  extensions: {\r\n    website: \"https://solana.com/\",\r\n    serumV3Usdc: \"9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT\",\r\n    serumV3Usdt: \"HWHvQhFmJB3NUcu1aihKmrKegfVxBEHzwVX6yZCKEsi1\",\r\n    coingeckoId: \"solana\",\r\n    waterfallbot: \"https://t.me/SOLwaterfall\",\r\n  },\r\n};\r\n\r\nexport function TokenListContextProvider(props: any) {\r\n  const tokenList = useMemo(() => {\r\n    const list = props.tokenList.filterByClusterSlug(\"mainnet-beta\").getList();\r\n    // Manually add a fake SOL mint for the native token. The component is\r\n    // opinionated in that it distinguishes between wrapped SOL and SOL.\r\n    list.push(SOL_TOKEN_INFO);\r\n    return list;\r\n  }, [props.tokenList]);\r\n\r\n  // Token map for quick lookup.\r\n  const tokenMap = useMemo(() => {\r\n    const tokenMap = new Map();\r\n    tokenList.forEach((t: TokenInfo) => {\r\n      tokenMap.set(t.address, t);\r\n    });\r\n    return tokenMap;\r\n  }, [tokenList]);\r\n\r\n  // Tokens with USD(x) quoted markets.\r\n  const swappableTokens = useMemo(() => {\r\n    const tokens = tokenList.filter((t: TokenInfo) => {\r\n      const isUsdxQuoted =\r\n        t.extensions?.serumV3Usdt || t.extensions?.serumV3Usdc;\r\n      return isUsdxQuoted;\r\n    });\r\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\r\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\r\n    );\r\n    return tokens;\r\n  }, [tokenList, tokenMap]);\r\n\r\n  // Sollet wrapped tokens.\r\n  const [swappableTokensSollet, solletMap] = useMemo(() => {\r\n    const tokens = tokenList.filter((t: TokenInfo) => {\r\n      const isSollet = t.tags?.includes(SPL_REGISTRY_SOLLET_TAG);\r\n      return isSollet;\r\n    });\r\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\r\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\r\n    );\r\n    return [\r\n      tokens,\r\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\r\n    ];\r\n  }, [tokenList]);\r\n\r\n  // Wormhole wrapped tokens.\r\n  const [swappableTokensWormhole, wormholeMap] = useMemo(() => {\r\n    const tokens = tokenList.filter((t: TokenInfo) => {\r\n      const isSollet = t.tags?.includes(SPL_REGISTRY_WORM_TAG);\r\n      return isSollet;\r\n    });\r\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\r\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\r\n    );\r\n    return [\r\n      tokens,\r\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\r\n    ];\r\n  }, [tokenList]);\r\n\r\n  return (\r\n    <_TokenListContext.Provider\r\n      value={{\r\n        tokenMap,\r\n        wormholeMap,\r\n        solletMap,\r\n        swappableTokens,\r\n        swappableTokensWormhole,\r\n        swappableTokensSollet,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </_TokenListContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTokenListContext(): TokenListContext {\r\n  const ctx = useContext(_TokenListContext);\r\n  if (ctx === null) {\r\n    throw new Error(\"Context not available\");\r\n  }\r\n  return ctx;\r\n}\r\n\r\nexport function useTokenMap(): Map<string, TokenInfo> {\r\n  const { tokenMap } = useTokenListContext();\r\n  return tokenMap;\r\n}\r\n\r\nexport function useSwappableTokens() {\r\n  const { swappableTokens, swappableTokensWormhole, swappableTokensSollet } =\r\n    useTokenListContext();\r\n  return { swappableTokens, swappableTokensWormhole, swappableTokensSollet };\r\n}\r\n","import { useAsync, UseAsyncReturn } from \"react-async-hook\";\r\nimport { Connection, PublicKey } from \"@solana/web3.js\";\r\n\r\n// Token info tracked by the sollet bridge.\r\ntype SolletInfo = {\r\n  blockchain: string;\r\n  erc20Contract: string;\r\n  name: string;\r\n  splMint: PublicKey;\r\n  ticker: string;\r\n};\r\n\r\nexport function useSolletInfo(mint: PublicKey): UseAsyncReturn<SolletInfo> {\r\n  return useAsync(async () => {\r\n    return fetchSolletInfo(mint);\r\n  }, [mint]);\r\n}\r\n\r\n// Fetches the token info from the sollet bridge.\r\nexport async function fetchSolletInfo(mint: PublicKey): Promise<SolletInfo> {\r\n  let info = _SOLLET_INFO_CACHE.get(mint.toString());\r\n  if (info !== undefined) {\r\n    return info;\r\n  }\r\n\r\n  const infoRaw = await swapApiRequest(\"GET\", `coins/sol/${mint.toString()}`);\r\n  info = { ...infoRaw, splMint: new PublicKey(infoRaw.splMint) };\r\n  _SOLLET_INFO_CACHE.set(mint.toString(), info!);\r\n\r\n  return info!;\r\n}\r\n\r\n// Requests the creation of a sollet wormhole swap market, if it doesn't\r\n// already exist. Note: this triggers a creation notification. Creation\r\n// doesn't happen immediately, but at some unspecified point in the future\r\n// since market makers need to setup on the swap market and provide liquidity.\r\n//\r\n// Returns true if the market exists already. False otherwise.\r\nexport async function requestWormholeSwapMarketIfNeeded(\r\n  connection: Connection,\r\n  solletMint: PublicKey,\r\n  wormholeMint: PublicKey,\r\n  swapMarket: PublicKey,\r\n  solletInfo: SolletInfo\r\n): Promise<boolean> {\r\n  const cached = _SWAP_MARKET_EXISTS_CACHE.get(swapMarket.toString());\r\n  if (cached !== undefined) {\r\n    return cached;\r\n  }\r\n  const acc = await connection.getAccountInfo(swapMarket);\r\n  if (acc === null) {\r\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), false);\r\n    const resource = `wormhole/pool/${\r\n      solletInfo.ticker\r\n    }/${swapMarket.toString()}/${solletMint.toString()}/${wormholeMint.toString()}`;\r\n    swapApiRequest(\"POST\", resource).catch(console.error);\r\n    return false;\r\n  } else {\r\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), true);\r\n    return true;\r\n  }\r\n}\r\n\r\nexport async function swapApiRequest(\r\n  method: string,\r\n  path: string,\r\n  body?: Object\r\n) {\r\n  let headers: any = {};\r\n  let params: any = { headers, method };\r\n  if (method === \"GET\") {\r\n    params.cache = \"no-cache\";\r\n  } else if (body) {\r\n    headers[\"Content-Type\"] = \"application/json\";\r\n    params.body = JSON.stringify(body);\r\n  }\r\n  let resp = await fetch(`https://swap.sollet.io/api/${path}`, params);\r\n  return await handleSwapApiResponse(resp);\r\n}\r\n\r\nasync function handleSwapApiResponse(resp: Response) {\r\n  let json = await resp.json();\r\n  if (!json.success) {\r\n    throw new SwapApiError(json.error, resp.status);\r\n  }\r\n  return json.result;\r\n}\r\n\r\nexport class SwapApiError extends Error {\r\n  readonly name: string;\r\n  readonly status: number;\r\n  constructor(msg: string, status: number) {\r\n    super(msg);\r\n    this.name = \"SwapApiError\";\r\n    this.status = status;\r\n  }\r\n}\r\n\r\nconst _SOLLET_INFO_CACHE = new Map<string, SolletInfo>();\r\nconst _SWAP_MARKET_EXISTS_CACHE = new Map<string, boolean>();\r\n","// TODO: replace this whole file with something more modern. This is all copied\r\n//       from sollet.\r\n\r\nimport * as BufferLayout from \"buffer-layout\";\r\nimport { BN } from \"@project-serum/anchor\";\r\nimport {\r\n  TOKEN_PROGRAM_ID,\r\n  ASSOCIATED_TOKEN_PROGRAM_ID,\r\n  Token,\r\n  AccountInfo as TokenAccount,\r\n} from \"@solana/spl-token\";\r\nimport { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport * as bs58 from \"bs58\";\r\n\r\nexport async function getOwnedAssociatedTokenAccounts(\r\n  connection: Connection,\r\n  publicKey: PublicKey\r\n) {\r\n  let filters = getOwnedAccountsFilters(publicKey);\r\n  // @ts-ignore\r\n  let resp = await connection._rpcRequest(\"getProgramAccounts\", [\r\n    TOKEN_PROGRAM_ID.toBase58(),\r\n    {\r\n      commitment: connection.commitment,\r\n      filters,\r\n    },\r\n  ]);\r\n  if (resp.error) {\r\n    throw new Error(\r\n      \"failed to get token accounts owned by \" +\r\n        publicKey.toBase58() +\r\n        \": \" +\r\n        resp.error.message\r\n    );\r\n  }\r\n  const accs = resp.result\r\n    .map(({ pubkey, account: { data, executable, owner, lamports } }: any) => ({\r\n      publicKey: new PublicKey(pubkey),\r\n      accountInfo: {\r\n        data: bs58.decode(data),\r\n        executable,\r\n        owner: new PublicKey(owner),\r\n        lamports,\r\n      },\r\n    }))\r\n    .filter(({ accountInfo }: any) => {\r\n      // TODO: remove this check once mainnet is updated\r\n      return filters.every((filter) => {\r\n        if (filter.dataSize) {\r\n          return accountInfo.data.length === filter.dataSize;\r\n        } else if (filter.memcmp) {\r\n          let filterBytes = bs58.decode(filter.memcmp.bytes);\r\n          return accountInfo.data\r\n            .slice(\r\n              filter.memcmp.offset,\r\n              filter.memcmp.offset + filterBytes.length\r\n            )\r\n            .equals(filterBytes);\r\n        }\r\n        return false;\r\n      });\r\n    })\r\n    .map(({ publicKey, accountInfo }: any) => {\r\n      return { publicKey, account: parseTokenAccountData(accountInfo.data) };\r\n    });\r\n\r\n  return (\r\n    (\r\n      await Promise.all(\r\n        accs\r\n          // @ts-ignore\r\n          .map(async (ta) => {\r\n            const ata = await Token.getAssociatedTokenAddress(\r\n              ASSOCIATED_TOKEN_PROGRAM_ID,\r\n              TOKEN_PROGRAM_ID,\r\n              ta.account.mint,\r\n              publicKey\r\n            );\r\n            return [ta, ata];\r\n          })\r\n      )\r\n    )\r\n      // @ts-ignore\r\n      .filter(([ta, ata]) => ta.publicKey.equals(ata))\r\n      // @ts-ignore\r\n      .map(([ta]) => ta)\r\n  );\r\n}\r\n\r\nconst ACCOUNT_LAYOUT = BufferLayout.struct([\r\n  BufferLayout.blob(32, \"mint\"),\r\n  BufferLayout.blob(32, \"owner\"),\r\n  BufferLayout.nu64(\"amount\"),\r\n  BufferLayout.blob(93),\r\n]);\r\n\r\nexport function parseTokenAccountData(data: Buffer): TokenAccount {\r\n  // @ts-ignore\r\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\r\n  // @ts-ignore\r\n  return {\r\n    mint: new PublicKey(mint),\r\n    owner: new PublicKey(owner),\r\n    amount: new BN(amount),\r\n  };\r\n}\r\n\r\nfunction getOwnedAccountsFilters(publicKey: PublicKey) {\r\n  return [\r\n    {\r\n      memcmp: {\r\n        // @ts-ignore\r\n        offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\r\n        bytes: publicKey.toBase58(),\r\n      },\r\n    },\r\n    {\r\n      dataSize: ACCOUNT_LAYOUT.span,\r\n    },\r\n  ];\r\n}\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport * as assert from \"assert\";\r\nimport { useAsync } from \"react-async-hook\";\r\nimport { Provider, BN } from \"@project-serum/anchor\";\r\nimport { PublicKey, Account } from \"@solana/web3.js\";\r\nimport {\r\n  MintInfo,\r\n  AccountInfo as TokenAccount,\r\n  Token,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport {\r\n  getOwnedAssociatedTokenAccounts,\r\n  parseTokenAccountData,\r\n} from \"../utils/tokens\";\r\nimport { SOL_MINT } from \"../utils/pubkeys\";\r\n\r\nexport type TokenContext = {\r\n  provider: Provider;\r\n};\r\nconst _TokenContext = React.createContext<TokenContext | null>(null);\r\n\r\nexport function TokenContextProvider(props: any) {\r\n  const provider = props.provider;\r\n  const [, setRefresh] = useState(0);\r\n\r\n  // Fetch all the owned token accounts for the wallet.\r\n  useEffect(() => {\r\n    if (!provider.wallet.publicKey) {\r\n      _OWNED_TOKEN_ACCOUNTS_CACHE.length = 0;\r\n      setRefresh((r) => r + 1);\r\n      return;\r\n    }\r\n    // Fetch SPL tokens.\r\n    getOwnedAssociatedTokenAccounts(\r\n      provider.connection,\r\n      provider.wallet.publicKey\r\n    ).then((accs) => {\r\n      if (accs) {\r\n        // @ts-ignore\r\n        _OWNED_TOKEN_ACCOUNTS_CACHE.push(...accs);\r\n        setRefresh((r) => r + 1);\r\n      }\r\n    });\r\n    // Fetch SOL balance.\r\n    provider.connection\r\n      .getAccountInfo(provider.wallet.publicKey)\r\n      .then((acc: { lamports: number }) => {\r\n        if (acc) {\r\n          _OWNED_TOKEN_ACCOUNTS_CACHE.push({\r\n            publicKey: provider.wallet.publicKey,\r\n            // @ts-ignore\r\n            account: {\r\n              amount: new BN(acc.lamports),\r\n              mint: SOL_MINT,\r\n            },\r\n          });\r\n          setRefresh((r) => r + 1);\r\n        }\r\n      });\r\n  }, [provider.wallet.publicKey, provider.connection]);\r\n\r\n  return (\r\n    <_TokenContext.Provider\r\n      value={{\r\n        provider,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </_TokenContext.Provider>\r\n  );\r\n}\r\n\r\nfunction useTokenContext() {\r\n  const ctx = useContext(_TokenContext);\r\n  if (ctx === null) {\r\n    throw new Error(\"Context not available\");\r\n  }\r\n  return ctx;\r\n}\r\n\r\n// Null => none exists.\r\n// Undefined => loading.\r\nexport function useOwnedTokenAccount(\r\n  mint?: PublicKey\r\n): { publicKey: PublicKey; account: TokenAccount } | null | undefined {\r\n  const { provider } = useTokenContext();\r\n  const [, setRefresh] = useState(0);\r\n  const tokenAccounts = _OWNED_TOKEN_ACCOUNTS_CACHE.filter(\r\n    (account) => mint && account.account.mint.equals(mint)\r\n  );\r\n\r\n  // Take the account with the most tokens in it.\r\n  tokenAccounts.sort((a, b) =>\r\n    a.account.amount > b.account.amount\r\n      ? -1\r\n      : a.account.amount < b.account.amount\r\n      ? 1\r\n      : 0\r\n  );\r\n\r\n  let tokenAccount = tokenAccounts[0];\r\n  const isSol = mint?.equals(SOL_MINT);\r\n\r\n  // Stream updates when the balance changes.\r\n  useEffect(() => {\r\n    let listener: number;\r\n    // SOL is special cased since it's not an SPL token.\r\n    if (tokenAccount && isSol) {\r\n      listener = provider.connection.onAccountChange(\r\n        provider.wallet.publicKey,\r\n        (info: { lamports: number }) => {\r\n          const token = {\r\n            amount: new BN(info.lamports),\r\n            mint: SOL_MINT,\r\n          } as TokenAccount;\r\n          if (token.amount !== tokenAccount.account.amount) {\r\n            const index = _OWNED_TOKEN_ACCOUNTS_CACHE.indexOf(tokenAccount);\r\n            assert.ok(index >= 0);\r\n            _OWNED_TOKEN_ACCOUNTS_CACHE[index].account = token;\r\n            setRefresh((r) => r + 1);\r\n          }\r\n        }\r\n      );\r\n    }\r\n    // SPL tokens.\r\n    else if (tokenAccount) {\r\n      listener = provider.connection.onAccountChange(\r\n        tokenAccount.publicKey,\r\n        (info) => {\r\n          const token = parseTokenAccountData(info.data);\r\n          if (token.amount !== tokenAccount.account.amount) {\r\n            const index = _OWNED_TOKEN_ACCOUNTS_CACHE.indexOf(tokenAccount);\r\n            assert.ok(index >= 0);\r\n            _OWNED_TOKEN_ACCOUNTS_CACHE[index].account = token;\r\n            setRefresh((r) => r + 1);\r\n          }\r\n        }\r\n      );\r\n    }\r\n    return () => {\r\n      if (listener) {\r\n        provider.connection.removeAccountChangeListener(listener);\r\n      }\r\n    };\r\n  }, [provider.connection, tokenAccount]);\r\n\r\n  if (mint === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  if (!isSol && tokenAccounts.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return tokenAccount;\r\n}\r\n\r\nexport function useMint(mint?: PublicKey): MintInfo | undefined | null {\r\n  const { provider } = useTokenContext();\r\n  // Lazy load the mint account if needeed.\r\n  const asyncMintInfo = useAsync(async () => {\r\n    if (!mint) {\r\n      return undefined;\r\n    }\r\n    if (_MINT_CACHE.get(mint.toString())) {\r\n      return _MINT_CACHE.get(mint.toString());\r\n    }\r\n\r\n    const mintClient = new Token(\r\n      provider.connection,\r\n      mint,\r\n      TOKEN_PROGRAM_ID,\r\n      new Account()\r\n    );\r\n    const mintInfo = mintClient.getMintInfo();\r\n    _MINT_CACHE.set(mint.toString(), mintInfo);\r\n    return mintInfo;\r\n  }, [provider.connection, mint]);\r\n\r\n  if (asyncMintInfo.result) {\r\n    return asyncMintInfo.result;\r\n  }\r\n  return undefined;\r\n}\r\n\r\nexport function setMintCache(pk: PublicKey, account: MintInfo) {\r\n  _MINT_CACHE.set(pk.toString(), new Promise((resolve) => resolve(account)));\r\n}\r\n\r\n// Cache storing all token accounts for the connected wallet provider.\r\nconst _OWNED_TOKEN_ACCOUNTS_CACHE: Array<{\r\n  publicKey: PublicKey;\r\n  account: TokenAccount;\r\n}> = [];\r\n\r\n// Cache storing all previously fetched mint infos.\r\n// @ts-ignore\r\nconst _MINT_CACHE = new Map<string, Promise<MintInfo>>([\r\n  [SOL_MINT.toString(), { decimals: 9 }],\r\n]);\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport * as assert from \"assert\";\r\nimport { useAsync } from \"react-async-hook\";\r\nimport { TokenInfo } from \"@solana/spl-token-registry\";\r\nimport { MintLayout } from \"@solana/spl-token\";\r\nimport { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { Swap as SwapClient } from \"@project-serum/swap\";\r\nimport {\r\n  Market,\r\n  OpenOrders,\r\n  Orderbook as OrderbookSide,\r\n} from \"@project-serum/serum\";\r\nimport {\r\n  DEX_PID,\r\n  USDC_MINT,\r\n  USDT_MINT,\r\n  SOL_MINT,\r\n  WRAPPED_SOL_MINT,\r\n  WORM_USDC_MINT,\r\n  WORM_USDT_MINT,\r\n  WORM_USDC_MARKET,\r\n  WORM_USDT_MARKET,\r\n  WORM_MARKET_BASE,\r\n} from \"../utils/pubkeys\";\r\nimport { useTokenMap, useTokenListContext } from \"./TokenList\";\r\nimport { fetchSolletInfo, requestWormholeSwapMarketIfNeeded } from \"./Sollet\";\r\nimport { setMintCache } from \"./Token\";\r\n\r\nconst BASE_TAKER_FEE_BPS = 0.0022;\r\nexport const FEE_MULTIPLIER = 1 - BASE_TAKER_FEE_BPS;\r\n\r\ntype DexContext = {\r\n  // Maps market address to open orders accounts.\r\n  openOrders: Map<string, Array<OpenOrders>>;\r\n  closeOpenOrders: (openOrder: OpenOrders) => void;\r\n  swapClient: SwapClient;\r\n};\r\nconst _DexContext = React.createContext<DexContext | null>(null);\r\n\r\nexport function DexContextProvider(props: any) {\r\n  const [ooAccounts, setOoAccounts] = useState<Map<string, Array<OpenOrders>>>(\r\n    new Map()\r\n  );\r\n  const swapClient = props.swapClient;\r\n\r\n  // Removes the given open orders from the context.\r\n  const closeOpenOrders = async (openOrder: OpenOrders) => {\r\n    const newOoAccounts = new Map(ooAccounts);\r\n    const openOrders = newOoAccounts\r\n      .get(openOrder.market.toString())\r\n      ?.filter((oo: OpenOrders) => !oo.address.equals(openOrder.address));\r\n    if (openOrders && openOrders.length > 0) {\r\n      newOoAccounts.set(openOrder.market.toString(), openOrders);\r\n    } else {\r\n      newOoAccounts.delete(openOrder.market.toString());\r\n    }\r\n    setOoAccounts(newOoAccounts);\r\n  };\r\n\r\n  // Three operations:\r\n  //\r\n  // 1. Fetch all open orders accounts for the connected wallet.\r\n  // 2. Batch fetch all market accounts for those open orders.\r\n  // 3. Batch fetch all mints associated with the markets.\r\n  useEffect(() => {\r\n    if (!swapClient.program.provider.wallet.publicKey) {\r\n      setOoAccounts(new Map());\r\n      return;\r\n    }\r\n    OpenOrders.findForOwner(\r\n      swapClient.program.provider.connection,\r\n      swapClient.program.provider.wallet.publicKey,\r\n      DEX_PID\r\n    ).then(async (openOrders) => {\r\n      const newOoAccounts = new Map();\r\n      let markets = new Set<string>();\r\n      openOrders.forEach((oo) => {\r\n        markets.add(oo.market.toString());\r\n        if (newOoAccounts.get(oo.market.toString())) {\r\n          newOoAccounts.get(oo.market.toString()).push(oo);\r\n        } else {\r\n          newOoAccounts.set(oo.market.toString(), [oo]);\r\n        }\r\n      });\r\n      if (markets.size > 100) {\r\n        // Punt request chunking until there's user demand.\r\n        throw new Error(\r\n          \"Too many markets. Please file an issue to update this\"\r\n        );\r\n      }\r\n      const multipleMarkets = await anchor.utils.rpc.getMultipleAccounts(\r\n        swapClient.program.provider.connection,\r\n        Array.from(markets.values()).map((m) => new PublicKey(m))\r\n      );\r\n      const marketClients = multipleMarkets.map((programAccount) => {\r\n        return {\r\n          publicKey: programAccount?.publicKey,\r\n          account: new Market(\r\n            Market.getLayout(DEX_PID).decode(programAccount?.account.data),\r\n            -1, // Set below so that we can batch fetch mints.\r\n            -1, // Set below so that we can batch fetch mints.\r\n            swapClient.program.provider.opts,\r\n            DEX_PID\r\n          ),\r\n        };\r\n      });\r\n\r\n      setOoAccounts(newOoAccounts);\r\n\r\n      // Batch fetch all the mints, since we know we'll need them at some\r\n      // point.\r\n      const mintPubkeys = Array.from(\r\n        new Set<string>(\r\n          marketClients\r\n            .map((m) => [\r\n              m.account.baseMintAddress.toString(),\r\n              m.account.quoteMintAddress.toString(),\r\n            ])\r\n            .flat()\r\n        ).values()\r\n      ).map((pk) => new PublicKey(pk));\r\n\r\n      if (mintPubkeys.length > 100) {\r\n        // Punt request chunking until there's user demand.\r\n        throw new Error(\"Too many mints. Please file an issue to update this\");\r\n      }\r\n\r\n      const mints = await anchor.utils.rpc.getMultipleAccounts(\r\n        swapClient.program.provider.connection,\r\n        mintPubkeys\r\n      );\r\n      const mintInfos = mints.map((mint) => {\r\n        const mintInfo = MintLayout.decode(mint!.account.data);\r\n        setMintCache(mint!.publicKey, mintInfo);\r\n        return { publicKey: mint!.publicKey, mintInfo };\r\n      });\r\n\r\n      marketClients.forEach((m) => {\r\n        const baseMintInfo = mintInfos.filter((mint) =>\r\n          mint.publicKey.equals(m.account.baseMintAddress)\r\n        )[0];\r\n        const quoteMintInfo = mintInfos.filter((mint) =>\r\n          mint.publicKey.equals(m.account.quoteMintAddress)\r\n        )[0];\r\n        assert.ok(baseMintInfo && quoteMintInfo);\r\n        // @ts-ignore\r\n        m.account._baseSplTokenDecimals = baseMintInfo.mintInfo.decimals;\r\n        // @ts-ignore\r\n        m.account._quoteSplTokenDecimals = quoteMintInfo.mintInfo.decimals;\r\n        _MARKET_CACHE.set(\r\n          m.publicKey!.toString(),\r\n          new Promise<Market>((resolve) => resolve(m.account))\r\n        );\r\n      });\r\n    });\r\n  }, [\r\n    swapClient.program.provider.connection,\r\n    swapClient.program.provider.wallet.publicKey,\r\n    swapClient.program.provider.opts,\r\n  ]);\r\n  return (\r\n    <_DexContext.Provider\r\n      value={{\r\n        openOrders: ooAccounts,\r\n        closeOpenOrders,\r\n        swapClient,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </_DexContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useDexContext(): DexContext {\r\n  const ctx = useContext(_DexContext);\r\n  if (ctx === null) {\r\n    throw new Error(\"Context not available\");\r\n  }\r\n  return ctx;\r\n}\r\n\r\nexport function useOpenOrders(): Map<string, Array<OpenOrders>> {\r\n  const ctx = useDexContext();\r\n  return ctx.openOrders;\r\n}\r\n\r\n// Lazy load a given market.\r\nexport function useMarket(market?: PublicKey): Market | undefined {\r\n  const { swapClient } = useDexContext();\r\n\r\n  const asyncMarket = useAsync(async () => {\r\n    if (!market) {\r\n      return undefined;\r\n    }\r\n    if (_MARKET_CACHE.get(market.toString())) {\r\n      return _MARKET_CACHE.get(market.toString());\r\n    }\r\n\r\n    const marketClient = new Promise<Market>(async (resolve) => {\r\n      // TODO: if we already have the mints, then pass them through to the\r\n      //       market client here to save a network request.\r\n      const marketClient = await Market.load(\r\n        swapClient.program.provider.connection,\r\n        market,\r\n        swapClient.program.provider.opts,\r\n        DEX_PID\r\n      );\r\n      resolve(marketClient);\r\n    });\r\n\r\n    _MARKET_CACHE.set(market.toString(), marketClient);\r\n    return marketClient;\r\n  }, [swapClient.program.provider.connection, market]);\r\n\r\n  if (asyncMarket.result) {\r\n    return asyncMarket.result;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\n// Lazy load the orderbook for a given market.\r\nexport function useOrderbook(market?: PublicKey): Orderbook | undefined {\r\n  const { swapClient } = useDexContext();\r\n  const marketClient = useMarket(market);\r\n  const [refresh, setRefresh] = useState(0);\r\n\r\n  const asyncOrderbook = useAsync(async () => {\r\n    if (!market || !marketClient) {\r\n      return undefined;\r\n    }\r\n    if (_ORDERBOOK_CACHE.get(market.toString())) {\r\n      return _ORDERBOOK_CACHE.get(market.toString());\r\n    }\r\n\r\n    const orderbook = new Promise<Orderbook>(async (resolve) => {\r\n      const [bids, asks] = await Promise.all([\r\n        marketClient.loadBids(swapClient.program.provider.connection),\r\n        marketClient.loadAsks(swapClient.program.provider.connection),\r\n      ]);\r\n\r\n      resolve({\r\n        bids,\r\n        asks,\r\n      });\r\n    });\r\n\r\n    _ORDERBOOK_CACHE.set(market.toString(), orderbook);\r\n\r\n    return orderbook;\r\n  }, [refresh, swapClient.program.provider.connection, market, marketClient]);\r\n\r\n  // Stream in bids updates.\r\n  useEffect(() => {\r\n    let listener: number | undefined;\r\n    if (marketClient?.bidsAddress) {\r\n      listener = swapClient.program.provider.connection.onAccountChange(\r\n        marketClient?.bidsAddress,\r\n        async (info) => {\r\n          const bids = OrderbookSide.decode(marketClient, info.data);\r\n          const orderbook = await _ORDERBOOK_CACHE.get(\r\n            marketClient.address.toString()\r\n          );\r\n          const oldBestBid = orderbook?.bids.items(true).next().value;\r\n          const newBestBid = bids.items(true).next().value;\r\n          if (\r\n            orderbook &&\r\n            oldBestBid &&\r\n            newBestBid &&\r\n            oldBestBid.price !== newBestBid.price\r\n          ) {\r\n            orderbook.bids = bids;\r\n            setRefresh((r) => r + 1);\r\n          }\r\n        }\r\n      );\r\n    }\r\n    return () => {\r\n      if (listener) {\r\n        swapClient.program.provider.connection.removeAccountChangeListener(\r\n          listener\r\n        );\r\n      }\r\n    };\r\n  }, [\r\n    marketClient,\r\n    marketClient?.bidsAddress,\r\n    swapClient.program.provider.connection,\r\n  ]);\r\n\r\n  // Stream in asks updates.\r\n  useEffect(() => {\r\n    let listener: number | undefined;\r\n    if (marketClient?.asksAddress) {\r\n      listener = swapClient.program.provider.connection.onAccountChange(\r\n        marketClient?.asksAddress,\r\n        async (info) => {\r\n          const asks = OrderbookSide.decode(marketClient, info.data);\r\n          const orderbook = await _ORDERBOOK_CACHE.get(\r\n            marketClient.address.toString()\r\n          );\r\n          const oldBestOffer = orderbook?.asks.items(false).next().value;\r\n          const newBestOffer = asks.items(false).next().value;\r\n          if (\r\n            orderbook &&\r\n            oldBestOffer &&\r\n            newBestOffer &&\r\n            oldBestOffer.price !== newBestOffer.price\r\n          ) {\r\n            orderbook.asks = asks;\r\n            setRefresh((r) => r + 1);\r\n          }\r\n        }\r\n      );\r\n    }\r\n    return () => {\r\n      if (listener) {\r\n        swapClient.program.provider.connection.removeAccountChangeListener(\r\n          listener\r\n        );\r\n      }\r\n    };\r\n  }, [\r\n    marketClient,\r\n    marketClient?.bidsAddress,\r\n    swapClient.program.provider.connection,\r\n  ]);\r\n\r\n  if (asyncOrderbook.result) {\r\n    return asyncOrderbook.result;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nexport function useMarketName(market: PublicKey): string | null {\r\n  const tokenMap = useTokenMap();\r\n  const marketClient = useMarket(market);\r\n  if (!marketClient) {\r\n    return null;\r\n  }\r\n  const baseTicker = marketClient\r\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\r\n    : \"-\";\r\n  const quoteTicker = marketClient\r\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\r\n    : \"-\";\r\n  const name = `${baseTicker} / ${quoteTicker}`;\r\n  return name;\r\n}\r\n\r\n// Fair price for a given market, as defined by the mid.\r\nexport function useBbo(market?: PublicKey): Bbo | undefined {\r\n  const orderbook = useOrderbook(market);\r\n  if (orderbook === undefined) {\r\n    return undefined;\r\n  }\r\n  const bestBid = orderbook.bids.items(true).next().value;\r\n  const bestOffer = orderbook.asks.items(false).next().value;\r\n  if (!bestBid && !bestOffer) {\r\n    return {};\r\n  }\r\n  if (!bestBid) {\r\n    return { bestOffer: bestOffer.price };\r\n  }\r\n  if (!bestOffer) {\r\n    return { bestBid: bestBid.price };\r\n  }\r\n  const mid = (bestBid.price + bestOffer.price) / 2.0;\r\n  return { bestBid: bestBid.price, bestOffer: bestOffer.price, mid };\r\n}\r\n\r\n// Fair price for a theoretical toMint/fromMint market. I.e., the number\r\n// of `fromMint` tokens to purchase a single `toMint` token. Aggregates\r\n// across a trade route, if needed.\r\nexport function useFairRoute(\r\n  fromMint: PublicKey,\r\n  toMint: PublicKey\r\n): number | undefined {\r\n  const route = useRoute(fromMint, toMint);\r\n  const fromBbo = useBbo(route ? route[0] : undefined);\r\n  const fromMarket = useMarket(route ? route[0] : undefined);\r\n  const toBbo = useBbo(route ? route[1] : undefined);\r\n\r\n  if (route === null) {\r\n    return undefined;\r\n  }\r\n\r\n  if (route.length === 1 && fromBbo !== undefined) {\r\n    if (fromMarket === undefined) {\r\n      return undefined;\r\n    }\r\n    if (\r\n      fromMarket?.baseMintAddress.equals(fromMint) ||\r\n      (fromMarket?.baseMintAddress.equals(WRAPPED_SOL_MINT) &&\r\n        fromMint.equals(SOL_MINT))\r\n    ) {\r\n      return fromBbo.bestBid && 1.0 / fromBbo.bestBid;\r\n    } else {\r\n      return fromBbo.bestOffer && fromBbo.bestOffer;\r\n    }\r\n  }\r\n  if (\r\n    fromBbo === undefined ||\r\n    fromBbo.bestBid === undefined ||\r\n    toBbo === undefined ||\r\n    toBbo.bestOffer === undefined\r\n  ) {\r\n    return undefined;\r\n  }\r\n  return toBbo.bestOffer / fromBbo.bestBid;\r\n}\r\n\r\nexport function useRoute(\r\n  fromMint: PublicKey,\r\n  toMint: PublicKey\r\n): Array<PublicKey> | null {\r\n  const route = useRouteVerbose(fromMint, toMint);\r\n  if (route === null) {\r\n    return null;\r\n  }\r\n  return route.markets;\r\n}\r\n\r\n// Types of routes.\r\n//\r\n// 1. Direct trades on USDC quoted markets.\r\n// 2. Transitive trades across two USDC qutoed markets.\r\n// 3. Wormhole <-> Sollet one-to-one swap markets.\r\n// 4. Wormhole <-> Native one-to-one swap markets.\r\n//\r\nexport function useRouteVerbose(\r\n  fromMint: PublicKey,\r\n  toMint: PublicKey\r\n): { markets: Array<PublicKey>; kind: RouteKind } | null {\r\n  const { swapClient } = useDexContext();\r\n  const { wormholeMap, solletMap } = useTokenListContext();\r\n  const asyncRoute = useAsync(async () => {\r\n    const swapMarket = await wormholeSwapMarket(\r\n      swapClient.program.provider.connection,\r\n      fromMint,\r\n      toMint,\r\n      wormholeMap,\r\n      solletMap\r\n    );\r\n    if (swapMarket !== null) {\r\n      const [wormholeMarket, kind] = swapMarket;\r\n      return { markets: [wormholeMarket], kind };\r\n    }\r\n    const markets = swapClient.route(\r\n      fromMint.equals(SOL_MINT) ? WRAPPED_SOL_MINT : fromMint,\r\n      toMint.equals(SOL_MINT) ? WRAPPED_SOL_MINT : toMint\r\n    );\r\n    if (markets === null) {\r\n      return null;\r\n    }\r\n    const kind: RouteKind = \"usdx\";\r\n    return { markets, kind };\r\n  }, [fromMint, toMint, swapClient]);\r\n\r\n  if (asyncRoute.result) {\r\n    return asyncRoute.result;\r\n  }\r\n  return null;\r\n}\r\n\r\ntype Orderbook = {\r\n  bids: OrderbookSide;\r\n  asks: OrderbookSide;\r\n};\r\n\r\n// Wormhole utils.\r\n\r\ntype RouteKind = \"wormhole-native\" | \"wormhole-sollet\" | \"usdx\";\r\n\r\n// Maps fromMint || toMint (in sort order) to swap market public key.\r\n// All markets for wormhole<->native tokens should be here, e.g.\r\n// USDC <-> wUSDC.\r\nconst WORMHOLE_NATIVE_MAP = new Map<string, PublicKey>([\r\n  [wormKey(WORM_USDC_MINT, USDC_MINT), WORM_USDC_MARKET],\r\n  [wormKey(WORM_USDT_MINT, USDT_MINT), WORM_USDT_MARKET],\r\n]);\r\n\r\nfunction wormKey(fromMint: PublicKey, toMint: PublicKey): string {\r\n  const [first, second] =\r\n    fromMint < toMint ? [fromMint, toMint] : [toMint, fromMint];\r\n  return first.toString() + second.toString();\r\n}\r\n\r\nasync function wormholeSwapMarket(\r\n  conn: Connection,\r\n  fromMint: PublicKey,\r\n  toMint: PublicKey,\r\n  wormholeMap: Map<string, TokenInfo>,\r\n  solletMap: Map<string, TokenInfo>\r\n): Promise<[PublicKey, RouteKind] | null> {\r\n  let market = wormholeNativeMarket(fromMint, toMint);\r\n  if (market !== null) {\r\n    return [market, \"wormhole-native\"];\r\n  }\r\n  market = await wormholeSolletMarket(\r\n    conn,\r\n    fromMint,\r\n    toMint,\r\n    wormholeMap,\r\n    solletMap\r\n  );\r\n  if (market === null) {\r\n    return null;\r\n  }\r\n  return [market, \"wormhole-sollet\"];\r\n}\r\n\r\nfunction wormholeNativeMarket(\r\n  fromMint: PublicKey,\r\n  toMint: PublicKey\r\n): PublicKey | null {\r\n  return WORMHOLE_NATIVE_MAP.get(wormKey(fromMint, toMint)) ?? null;\r\n}\r\n\r\n// Returns the market address of the 1-1 sollet<->wormhole swap market if it\r\n// exists. Otherwise, returns null.\r\nasync function wormholeSolletMarket(\r\n  conn: Connection,\r\n  fromMint: PublicKey,\r\n  toMint: PublicKey,\r\n  wormholeMap: Map<string, TokenInfo>,\r\n  solletMap: Map<string, TokenInfo>\r\n): Promise<PublicKey | null> {\r\n  const fromWormhole = wormholeMap.get(fromMint.toString());\r\n  const isFromWormhole = fromWormhole !== undefined;\r\n\r\n  const toWormhole = wormholeMap.get(toMint.toString());\r\n  const isToWormhole = toWormhole !== undefined;\r\n\r\n  const fromSollet = solletMap.get(fromMint.toString());\r\n  const isFromSollet = fromSollet !== undefined;\r\n\r\n  const toSollet = solletMap.get(toMint.toString());\r\n  const isToSollet = toSollet !== undefined;\r\n\r\n  if ((isFromWormhole || isToWormhole) && isFromWormhole !== isToWormhole) {\r\n    if ((isFromSollet || isToSollet) && isFromSollet !== isToSollet) {\r\n      const base = isFromSollet ? fromMint : toMint;\r\n      const [quote, wormholeInfo] = isFromWormhole\r\n        ? [fromMint, fromWormhole]\r\n        : [toMint, toWormhole];\r\n\r\n      const solletInfo = await fetchSolletInfo(base);\r\n\r\n      if (solletInfo.erc20Contract !== wormholeInfo!.extensions?.address) {\r\n        return null;\r\n      }\r\n\r\n      const market = await deriveWormholeMarket(base, quote);\r\n      if (market === null) {\r\n        return null;\r\n      }\r\n\r\n      const marketExists = await requestWormholeSwapMarketIfNeeded(\r\n        conn,\r\n        base,\r\n        quote,\r\n        market,\r\n        solletInfo\r\n      );\r\n      if (!marketExists) {\r\n        return null;\r\n      }\r\n\r\n      return market;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// Calculates the deterministic address for the sollet<->wormhole 1-1 swap\r\n// market.\r\nasync function deriveWormholeMarket(\r\n  baseMint: PublicKey,\r\n  quoteMint: PublicKey,\r\n  version = 0\r\n): Promise<PublicKey | null> {\r\n  if (version > 99) {\r\n    console.log(\"Swap market version cannot be greater than 99\");\r\n    return null;\r\n  }\r\n  if (version < 0) {\r\n    console.log(\"Version cannot be less than zero\");\r\n    return null;\r\n  }\r\n\r\n  const padToTwo = (n: number) => (n <= 99 ? `0${n}`.slice(-2) : n);\r\n  const seed =\r\n    baseMint.toString().slice(0, 15) +\r\n    quoteMint.toString().slice(0, 15) +\r\n    padToTwo(version);\r\n  return await PublicKey.createWithSeed(WORM_MARKET_BASE, seed, DEX_PID);\r\n}\r\n\r\ntype Bbo = {\r\n  bestBid?: number;\r\n  bestOffer?: number;\r\n  mid?: number;\r\n};\r\n\r\nconst _ORDERBOOK_CACHE = new Map<string, Promise<Orderbook>>();\r\nconst _MARKET_CACHE = new Map<string, Promise<Market>>();\r\n","import * as assert from \"assert\";\r\nimport React, { useContext, useState, useEffect } from \"react\";\r\nimport { useAsync } from \"react-async-hook\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport {\r\n  Token,\r\n  ASSOCIATED_TOKEN_PROGRAM_ID,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport { Market } from \"@project-serum/serum\";\r\nimport { SRM_MINT, USDC_MINT, USDT_MINT } from \"../utils/pubkeys\";\r\nimport {\r\n  useFairRoute,\r\n  useRouteVerbose,\r\n  useDexContext,\r\n  FEE_MULTIPLIER,\r\n} from \"./Dex\";\r\nimport {\r\n  useTokenListContext,\r\n  SPL_REGISTRY_SOLLET_TAG,\r\n  SPL_REGISTRY_WORM_TAG,\r\n} from \"./TokenList\";\r\nimport { useOwnedTokenAccount } from \"../context/Token\";\r\n\r\nconst DEFAULT_SLIPPAGE_PERCENT = 0.5;\r\n\r\nexport type SwapContext = {\r\n  // Mint being traded from. The user must own these tokens.\r\n  fromMint: PublicKey;\r\n  setFromMint: (m: PublicKey) => void;\r\n\r\n  // Mint being traded to. The user will receive these tokens after the swap.\r\n  toMint: PublicKey;\r\n  setToMint: (m: PublicKey) => void;\r\n\r\n  // Amount used for the swap.\r\n  fromAmount: number;\r\n  setFromAmount: (a: number) => void;\r\n\r\n  // *Expected* amount received from the swap.\r\n  toAmount: number;\r\n  setToAmount: (a: number) => void;\r\n\r\n  // Function to flip what we consider to be the \"to\" and \"from\" mints.\r\n  swapToFromMints: () => void;\r\n\r\n  // The amount (in units of percent) a swap can be off from the estimate\r\n  // shown to the user.\r\n  slippage: number;\r\n  setSlippage: (n: number) => void;\r\n\r\n  // Null if the user is using fairs directly from DEX prices.\r\n  // Otherwise, a user specified override for the price to use when calculating\r\n  // swap amounts.\r\n  fairOverride: number | null;\r\n  setFairOverride: (n: number | null) => void;\r\n\r\n  // The referral *owner* address. Associated token accounts must be created,\r\n  // first, for this to be used.\r\n  referral?: PublicKey;\r\n\r\n  // True if all newly created market accounts should be closed in the\r\n  // same user flow (ideally in the same transaction).\r\n  isClosingNewAccounts: boolean;\r\n\r\n  // True if the swap exchange rate should be a function of nothing but the\r\n  // from and to tokens, ignoring any quote tokens that may have been\r\n  // accumulated by performing the swap.\r\n  //\r\n  // Always false (for now).\r\n  isStrict: boolean;\r\n  setIsStrict: (isStrict: boolean) => void;\r\n\r\n  setIsClosingNewAccounts: (b: boolean) => void;\r\n};\r\nconst _SwapContext = React.createContext<null | SwapContext>(null);\r\n\r\nexport function SwapContextProvider(props: any) {\r\n  const [fromMint, setFromMint] = useState(props.fromMint ?? SRM_MINT);\r\n  const [toMint, setToMint] = useState(props.toMint ?? USDC_MINT);\r\n  const [fromAmount, _setFromAmount] = useState(props.fromAmount ?? 0);\r\n  const [toAmount, _setToAmount] = useState(props.toAmount ?? 0);\r\n  const [isClosingNewAccounts, setIsClosingNewAccounts] = useState(false);\r\n  const [isStrict, setIsStrict] = useState(false);\r\n  const [slippage, setSlippage] = useState(DEFAULT_SLIPPAGE_PERCENT);\r\n  const [fairOverride, setFairOverride] = useState<number | null>(null);\r\n  const fair = _useSwapFair(fromMint, toMint, fairOverride);\r\n  const referral = props.referral;\r\n\r\n  assert.ok(slippage >= 0);\r\n\r\n  useEffect(() => {\r\n    if (!fair) {\r\n      return;\r\n    }\r\n    setFromAmount(fromAmount);\r\n  }, [fair]);\r\n\r\n  const swapToFromMints = () => {\r\n    const oldFrom = fromMint;\r\n    const oldTo = toMint;\r\n    const oldToAmount = toAmount;\r\n    _setFromAmount(oldToAmount);\r\n    setFromMint(oldTo);\r\n    setToMint(oldFrom);\r\n  };\r\n\r\n  const setFromAmount = (amount: number) => {\r\n    if (fair === undefined) {\r\n      _setFromAmount(0);\r\n      _setToAmount(0);\r\n      return;\r\n    }\r\n    _setFromAmount(amount);\r\n    _setToAmount(FEE_MULTIPLIER * (amount / fair));\r\n  };\r\n\r\n  const setToAmount = (amount: number) => {\r\n    if (fair === undefined) {\r\n      _setFromAmount(0);\r\n      _setToAmount(0);\r\n      return;\r\n    }\r\n    _setToAmount(amount);\r\n    _setFromAmount((amount * fair) / FEE_MULTIPLIER);\r\n  };\r\n\r\n  return (\r\n    <_SwapContext.Provider\r\n      value={{\r\n        fromMint,\r\n        setFromMint,\r\n        toMint,\r\n        setToMint,\r\n        fromAmount,\r\n        setFromAmount,\r\n        toAmount,\r\n        setToAmount,\r\n        swapToFromMints,\r\n        slippage,\r\n        setSlippage,\r\n        fairOverride,\r\n        setFairOverride,\r\n        isClosingNewAccounts,\r\n        isStrict,\r\n        setIsStrict,\r\n        setIsClosingNewAccounts,\r\n        referral,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </_SwapContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useSwapContext(): SwapContext {\r\n  const ctx = useContext(_SwapContext);\r\n  if (ctx === null) {\r\n    throw new Error(\"Context not available\");\r\n  }\r\n  return ctx;\r\n}\r\n\r\nexport function useSwapFair(): number | undefined {\r\n  const { fairOverride, fromMint, toMint } = useSwapContext();\r\n  return _useSwapFair(fromMint, toMint, fairOverride);\r\n}\r\n\r\nfunction _useSwapFair(\r\n  fromMint: PublicKey,\r\n  toMint: PublicKey,\r\n  fairOverride: number | null\r\n): number | undefined {\r\n  const fairRoute = useFairRoute(fromMint, toMint);\r\n  const fair = fairOverride === null ? fairRoute : fairOverride;\r\n  return fair;\r\n}\r\n\r\n// Returns true if the user can swap with the current context.\r\nexport function useCanSwap(): boolean {\r\n  const { fromMint, toMint, fromAmount, toAmount } = useSwapContext();\r\n  const { swapClient } = useDexContext();\r\n  const { wormholeMap, solletMap } = useTokenListContext();\r\n  const fromWallet = useOwnedTokenAccount(fromMint);\r\n  const fair = useSwapFair();\r\n  const route = useRouteVerbose(fromMint, toMint);\r\n  if (route === null) {\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    // From wallet exists.\r\n    fromWallet !== undefined &&\r\n    fromWallet !== null &&\r\n    // Fair price is defined.\r\n    fair !== undefined &&\r\n    fair > 0 &&\r\n    // Mints are distinct.\r\n    fromMint.equals(toMint) === false &&\r\n    // Wallet is connected.\r\n    swapClient.program.provider.wallet.publicKey !== null &&\r\n    // Trade amounts greater than zero.\r\n    fromAmount > 0 &&\r\n    toAmount > 0 &&\r\n    // Trade route exists.\r\n    route !== null &&\r\n    // Wormhole <-> native markets must have the wormhole token as the\r\n    // *from* address since they're one-sided markets.\r\n    (route.kind !== \"wormhole-native\" ||\r\n      wormholeMap\r\n        .get(fromMint.toString())\r\n        ?.tags?.includes(SPL_REGISTRY_WORM_TAG) !== undefined) &&\r\n    // Wormhole <-> sollet markets must have the sollet token as the\r\n    // *from* address since they're one sided markets.\r\n    (route.kind !== \"wormhole-sollet\" ||\r\n      solletMap\r\n        .get(fromMint.toString())\r\n        ?.tags?.includes(SPL_REGISTRY_SOLLET_TAG) !== undefined)\r\n  );\r\n}\r\n\r\nexport function useReferral(fromMarket?: Market): PublicKey | undefined {\r\n  const { referral } = useSwapContext();\r\n  const asyncReferral = useAsync(async () => {\r\n    if (!referral) {\r\n      return undefined;\r\n    }\r\n    if (!fromMarket) {\r\n      return undefined;\r\n    }\r\n    if (\r\n      !fromMarket.quoteMintAddress.equals(USDC_MINT) &&\r\n      !fromMarket.quoteMintAddress.equals(USDT_MINT)\r\n    ) {\r\n      return undefined;\r\n    }\r\n\r\n    return Token.getAssociatedTokenAddress(\r\n      ASSOCIATED_TOKEN_PROGRAM_ID,\r\n      TOKEN_PROGRAM_ID,\r\n      fromMarket.quoteMintAddress,\r\n      referral\r\n    );\r\n  }, [fromMarket]);\r\n\r\n  if (!asyncReferral.result) {\r\n    return undefined;\r\n  }\r\n  return asyncReferral.result;\r\n}\r\n","import { useState } from \"react\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport { TokenInfo } from \"@solana/spl-token-registry\";\r\nimport {\r\n  makeStyles,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  List,\r\n  ListItem,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n} from \"@material-ui/core\";\r\nimport { TokenIcon } from \"./Swap\";\r\nimport { useSwappableTokens } from \"../context/TokenList\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  dialogContent: {\r\n    padding: 0,\r\n  },\r\n  textField: {\r\n    marginBottom: \"8px\",\r\n  },\r\n  tab: {\r\n    minWidth: \"134px\",\r\n  },\r\n  tabSelected: {\r\n    color: theme.palette.primary.contrastText,\r\n    fontWeight: 700,\r\n    backgroundColor: theme.palette.primary.main,\r\n    borderRadius: \"10px\",\r\n  },\r\n  tabIndicator: {\r\n    opacity: 0,\r\n  },\r\n}));\r\n\r\nexport default function TokenDialog({\r\n  open,\r\n  onClose,\r\n  setMint,\r\n}: {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  setMint: (mint: PublicKey) => void;\r\n}) {\r\n  const [tabSelection, setTabSelection] = useState(0);\r\n  const [tokenFilter, setTokenFilter] = useState(\"\");\r\n  const filter = tokenFilter.toLowerCase();\r\n  const styles = useStyles();\r\n  const { swappableTokens, swappableTokensSollet, swappableTokensWormhole } =\r\n    useSwappableTokens();\r\n  const displayTabs = !useMediaQuery(\"(max-width:450px)\");\r\n  const selectedTokens =\r\n    tabSelection === 0\r\n      ? swappableTokens\r\n      : tabSelection === 1\r\n      ? swappableTokensWormhole\r\n      : swappableTokensSollet;\r\n  let tokens =\r\n    tokenFilter === \"\"\r\n      ? selectedTokens\r\n      : selectedTokens.filter(\r\n          (t) =>\r\n            t.symbol.toLowerCase().startsWith(filter) ||\r\n            t.name.toLowerCase().startsWith(filter) ||\r\n            t.address.toLowerCase().startsWith(filter)\r\n        );\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={onClose}\r\n      scroll={\"paper\"}\r\n      PaperProps={{\r\n        style: {\r\n          borderRadius: \"10px\",\r\n          width: \"420px\",\r\n        },\r\n      }}\r\n    >\r\n      <DialogTitle style={{ fontWeight: \"bold\" }}>\r\n        <Typography variant=\"h6\" style={{ paddingBottom: \"16px\" }}>\r\n          Select a token\r\n        </Typography>\r\n        <TextField\r\n          className={styles.textField}\r\n          placeholder={\"Search name\"}\r\n          value={tokenFilter}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          onChange={(e) => setTokenFilter(e.target.value)}\r\n        />\r\n      </DialogTitle>\r\n      <DialogContent className={styles.dialogContent} dividers={true}>\r\n        <List disablePadding>\r\n          {tokens.map((tokenInfo: TokenInfo) => (\r\n            <TokenListItem\r\n              key={tokenInfo.address}\r\n              tokenInfo={tokenInfo}\r\n              onClick={(mint) => {\r\n                setMint(mint);\r\n                onClose();\r\n              }}\r\n            />\r\n          ))}\r\n        </List>\r\n      </DialogContent>\r\n      {displayTabs && (\r\n        <DialogActions>\r\n          <Tabs\r\n            value={tabSelection}\r\n            onChange={(e, v) => setTabSelection(v)}\r\n            classes={{\r\n              indicator: styles.tabIndicator,\r\n            }}\r\n          >\r\n            <Tab\r\n              value={0}\r\n              className={styles.tab}\r\n              classes={{ selected: styles.tabSelected }}\r\n              label=\"Main\"\r\n            />\r\n            <Tab\r\n              value={1}\r\n              className={styles.tab}\r\n              classes={{ selected: styles.tabSelected }}\r\n              label=\"Wormhole\"\r\n            />\r\n            <Tab\r\n              value={2}\r\n              className={styles.tab}\r\n              classes={{ selected: styles.tabSelected }}\r\n              label=\"Sollet\"\r\n            />\r\n          </Tabs>\r\n        </DialogActions>\r\n      )}\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nfunction TokenListItem({\r\n  tokenInfo,\r\n  onClick,\r\n}: {\r\n  tokenInfo: TokenInfo;\r\n  onClick: (mint: PublicKey) => void;\r\n}) {\r\n  const mint = new PublicKey(tokenInfo.address);\r\n  return (\r\n    <ListItem\r\n      button\r\n      onClick={() => onClick(mint)}\r\n      style={{ padding: \"10px 20px\" }}\r\n    >\r\n      <TokenIcon mint={mint} style={{ width: \"30px\", borderRadius: \"15px\" }} />\r\n      <TokenName tokenInfo={tokenInfo} />\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nfunction TokenName({ tokenInfo }: { tokenInfo: TokenInfo }) {\r\n  return (\r\n    <div style={{ marginLeft: \"16px\" }}>\r\n      <Typography style={{ fontWeight: \"bold\" }}>\r\n        {tokenInfo?.symbol}\r\n      </Typography>\r\n      <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\r\n        {tokenInfo?.name}\r\n      </Typography>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useMemo, useEffect } from \"react\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport { MintInfo } from \"@solana/spl-token\";\r\nimport { BN } from \"@project-serum/anchor\";\r\nimport { OpenOrders } from \"@project-serum/serum\";\r\nimport {\r\n  makeStyles,\r\n  Dialog,\r\n  DialogContent,\r\n  Paper,\r\n  Table,\r\n  TableRow,\r\n  TableHead,\r\n  TableCell,\r\n  TableBody,\r\n  TableContainer,\r\n  IconButton,\r\n  Typography,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  Link,\r\n} from \"@material-ui/core\";\r\nimport { Close } from \"@material-ui/icons\";\r\nimport { useMarket, useOpenOrders, useDexContext } from \"../context/Dex\";\r\nimport { useTokenMap } from \"../context/TokenList\";\r\nimport { useMint, useOwnedTokenAccount } from \"../context/Token\";\r\nimport { DEX_PID } from \"../utils/pubkeys\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {},\r\n  closeAccount: {\r\n    color: theme.palette.error.main,\r\n  },\r\n}));\r\n\r\nexport default function OpenOrdersDialog({\r\n  open,\r\n  onClose,\r\n}: {\r\n  open: boolean;\r\n  onClose: () => void;\r\n}) {\r\n  return (\r\n    <Dialog\r\n      maxWidth=\"lg\"\r\n      open={open}\r\n      onClose={onClose}\r\n      PaperProps={{\r\n        style: {\r\n          borderRadius: \"10px\",\r\n        },\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"flex-end\",\r\n        }}\r\n      >\r\n        <IconButton\r\n          onClick={onClose}\r\n          style={{\r\n            padding: 10,\r\n          }}\r\n        >\r\n          <Close />\r\n        </IconButton>\r\n      </div>\r\n      <DialogContent style={{ paddingTop: 0 }}>\r\n        <OpenOrdersAccounts />\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nfunction OpenOrdersAccounts() {\r\n  const styles = useStyles();\r\n  const openOrders = useOpenOrders();\r\n  const openOrdersEntries: Array<[PublicKey, OpenOrders[]]> = useMemo(() => {\r\n    return Array.from(openOrders.entries()).map(([market, oo]) => [\r\n      new PublicKey(market),\r\n      oo,\r\n    ]);\r\n  }, [openOrders]);\r\n  return (\r\n    <TableContainer component={Paper} elevation={0}>\r\n      <Table className={styles.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Market</TableCell>\r\n            <TableCell align=\"center\">Open Orders Account</TableCell>\r\n            <TableCell align=\"center\">Base Used</TableCell>\r\n            <TableCell align=\"center\">Base Free</TableCell>\r\n            <TableCell align=\"center\">Quote Used</TableCell>\r\n            <TableCell align=\"center\">Quote Free</TableCell>\r\n            <TableCell align=\"center\">Settle</TableCell>\r\n            <TableCell align=\"center\">Close</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {openOrdersEntries.map(([market, oos]) => {\r\n            return (\r\n              <OpenOrdersRow\r\n                key={market.toString()}\r\n                market={market}\r\n                openOrders={oos}\r\n              />\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nfunction OpenOrdersRow({\r\n  market,\r\n  openOrders,\r\n}: {\r\n  market: PublicKey;\r\n  openOrders: Array<OpenOrders>;\r\n}) {\r\n  const styles = useStyles();\r\n  const [ooAccount, setOoAccount] = useState(openOrders[0]);\r\n  useEffect(() => {\r\n    setOoAccount(openOrders[0]);\r\n  }, [openOrders]);\r\n  const { swapClient, closeOpenOrders } = useDexContext();\r\n  const marketClient = useMarket(market);\r\n  const tokenMap = useTokenMap();\r\n  const base = useMint(marketClient?.baseMintAddress);\r\n  const quote = useMint(marketClient?.quoteMintAddress);\r\n  const baseWallet = useOwnedTokenAccount(marketClient?.baseMintAddress);\r\n  const quoteWallet = useOwnedTokenAccount(marketClient?.quoteMintAddress);\r\n  const baseTicker = marketClient\r\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\r\n    : \"-\";\r\n  const quoteTicker = marketClient\r\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\r\n    : \"-\";\r\n  const marketName =\r\n    baseTicker && quoteTicker\r\n      ? `${baseTicker} / ${quoteTicker}`\r\n      : market.toString();\r\n  const settleDisabled =\r\n    ooAccount.baseTokenFree.toNumber() + ooAccount.quoteTokenFree.toNumber() ===\r\n    0;\r\n  const closeDisabled =\r\n    ooAccount.baseTokenTotal.toNumber() +\r\n      ooAccount.quoteTokenTotal.toNumber() !==\r\n    0;\r\n\r\n  const settleFunds = async () => {\r\n    if (!marketClient) {\r\n      throw new Error(\"Market client not found\");\r\n    }\r\n    if (!baseWallet || !quoteWallet) {\r\n      throw new Error(\"Base or quote wallet not found\");\r\n    }\r\n    const referrerWallet = undefined;\r\n    const { transaction, signers } =\r\n      await marketClient.makeSettleFundsTransaction(\r\n        swapClient.program.provider.connection,\r\n        ooAccount,\r\n        baseWallet.publicKey,\r\n        quoteWallet.publicKey,\r\n        referrerWallet\r\n      );\r\n    await swapClient.program.provider.send(transaction, signers);\r\n  };\r\n\r\n  const _closeOpenOrders = async () => {\r\n    await swapClient.program.rpc.closeAccount({\r\n      accounts: {\r\n        openOrders: ooAccount.address,\r\n        authority: swapClient.program.provider.wallet.publicKey,\r\n        destination: swapClient.program.provider.wallet.publicKey,\r\n        market: marketClient!.address,\r\n        dexProgram: DEX_PID,\r\n      },\r\n    });\r\n    closeOpenOrders(ooAccount);\r\n  };\r\n\r\n  return (\r\n    <TableRow key={market.toString()}>\r\n      <TableCell component=\"th\" scope=\"row\">\r\n        <Typography>\r\n          <Link\r\n            href={`https://dex.projectserum.com/#/market/${market.toString()}`}\r\n            target=\"_blank\"\r\n            rel=\"noopener\"\r\n          >\r\n            {marketName}\r\n          </Link>\r\n        </Typography>\r\n      </TableCell>\r\n      <TableCell align=\"center\">\r\n        <Select\r\n          value={ooAccount.address.toString()}\r\n          onChange={(e) =>\r\n            setOoAccount(\r\n              openOrders.filter(\r\n                (oo) => oo.address.toString() === e.target.value\r\n              )[0]\r\n            )\r\n          }\r\n        >\r\n          {openOrders.map((oo) => {\r\n            return (\r\n              <MenuItem\r\n                key={oo.address.toString()}\r\n                value={oo.address.toString()}\r\n              >\r\n                {oo.address.toString()}\r\n              </MenuItem>\r\n            );\r\n          })}\r\n        </Select>\r\n      </TableCell>\r\n      <TableCell align=\"center\">\r\n        {toDisplay(base, ooAccount.baseTokenTotal.sub(ooAccount.baseTokenFree))}\r\n      </TableCell>\r\n      <TableCell align=\"center\">\r\n        {toDisplay(base, ooAccount.baseTokenFree)}\r\n      </TableCell>\r\n      <TableCell align=\"center\">\r\n        {toDisplay(\r\n          quote,\r\n          ooAccount.quoteTokenTotal.sub(ooAccount.quoteTokenFree)\r\n        )}\r\n      </TableCell>\r\n      <TableCell align=\"center\">\r\n        {toDisplay(quote, ooAccount.quoteTokenFree)}\r\n      </TableCell>\r\n      <TableCell align=\"center\">\r\n        <Button color=\"primary\" disabled={settleDisabled} onClick={settleFunds}>\r\n          Settle\r\n        </Button>\r\n      </TableCell>\r\n      <TableCell align=\"center\">\r\n        <Button\r\n          disabled={closeDisabled}\r\n          onClick={_closeOpenOrders}\r\n          className={styles.closeAccount}\r\n        >\r\n          Close\r\n        </Button>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n\r\nfunction toDisplay(mintInfo: MintInfo | undefined | null, value: BN): string {\r\n  if (!mintInfo) {\r\n    return value.toNumber().toString();\r\n  }\r\n  return (value.toNumber() / 10 ** mintInfo.decimals).toFixed(\r\n    mintInfo.decimals\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport {\r\n  makeStyles,\r\n  Popover,\r\n  IconButton,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  InputAdornment,\r\n  Switch,\r\n  FormControlLabel,\r\n  FormGroup,\r\n} from \"@material-ui/core\";\r\nimport { SettingsOutlined as Settings } from \"@material-ui/icons\";\r\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\r\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\r\nimport { useDexContext } from \"../context/Dex\";\r\nimport OpenOrdersDialog from \"./OpenOrdersDialog\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tab: {\r\n    width: \"50%\",\r\n  },\r\n  table: {},\r\n  settingsButton: {\r\n    padding: 0,\r\n    color: theme.palette.primary.main,\r\n  },\r\n  closeAccountSwitchLabel: {\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  fairAutoSelected: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    padding: \"3px 5px\",\r\n    borderRadius: \"10px\",\r\n    color: theme.palette.primary.contrastText,\r\n    fontWeight: 700,\r\n  },\r\n  fairAuto: {\r\n    backgroundColor:\r\n      theme.palette.type === \"dark\"\r\n        ? theme.palette.secondary.light\r\n        : theme.palette.secondary.main,\r\n    padding: \"3px 5px\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"none\",\r\n  },\r\n}));\r\n\r\nexport function SettingsButton() {\r\n  const styles = useStyles();\r\n\r\n  return (\r\n    <PopupState variant=\"popover\">\r\n      {\r\n        //@ts-ignore\r\n        (popupState) => (\r\n          <div>\r\n            <IconButton\r\n              {...bindTrigger(popupState)}\r\n              className={styles.settingsButton}\r\n            >\r\n              <Settings />\r\n            </IconButton>\r\n            <Popover\r\n              {...bindPopover(popupState)}\r\n              anchorOrigin={{\r\n                vertical: \"bottom\",\r\n                horizontal: \"left\",\r\n              }}\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              PaperProps={{\r\n                style: {\r\n                  borderRadius: \"10px\",\r\n                  boxShadow: \"0px 0px 30px 5px rgba(0,0,0,0.075)\",\r\n                },\r\n              }}\r\n            >\r\n              <SettingsDetails />\r\n            </Popover>\r\n          </div>\r\n        )\r\n      }\r\n    </PopupState>\r\n  );\r\n}\r\n\r\nfunction SettingsDetails() {\r\n  const styles = useStyles();\r\n\r\n  const { slippage, setSlippage, fairOverride, setFairOverride } =\r\n    useSwapContext();\r\n  const [showSettingsDialog, setShowSettingsDialog] = useState(false);\r\n  const fair = useSwapFair();\r\n  const { swapClient } = useDexContext();\r\n\r\n  const setSlippageHandler = (value?: number) => {\r\n    setSlippage(!value || value < 0 ? 0 : value);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"15px\", width: \"305px\" }}>\r\n      <Typography style={{ fontWeight: \"bold\" }}>Settings</Typography>\r\n      <div>\r\n        <div style={{ marginTop: \"10px\" }}>\r\n          <Typography color=\"textSecondary\" style={{ fontSize: \"12px\" }}>\r\n            Slippage tolerance\r\n          </Typography>\r\n          <TextField\r\n            type=\"number\"\r\n            placeholder=\"Error tolerance percentage\"\r\n            value={slippage}\r\n            onChange={(e) => setSlippageHandler(parseFloat(e.target.value))}\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              flexDirection: \"column\",\r\n            }}\r\n            InputProps={{\r\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\r\n            }}\r\n          />\r\n        </div>\r\n        <div style={{ marginTop: \"10px\" }}>\r\n          <Typography color=\"textSecondary\" style={{ fontSize: \"12px\" }}>\r\n            Fair price\r\n          </Typography>\r\n          <div style={{ display: \"flex\" }}>\r\n            <TextField\r\n              type=\"number\"\r\n              placeholder=\"Fair price override\"\r\n              value={fair}\r\n              onChange={(e) => setFairOverride(parseFloat(e.target.value))}\r\n              style={{\r\n                marginRight: \"10px\",\r\n                flex: 1,\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                flexDirection: \"column\",\r\n              }}\r\n              disabled={fairOverride === null}\r\n            />\r\n            <Button\r\n              component=\"div\"\r\n              variant=\"contained\"\r\n              onClick={() => {\r\n                if (fair === undefined) {\r\n                  console.error(\"Fair is undefined\");\r\n                  return;\r\n                }\r\n                if (fairOverride === null) {\r\n                  setFairOverride(fair);\r\n                } else {\r\n                  setFairOverride(null);\r\n                }\r\n              }}\r\n              className={\r\n                fairOverride === null\r\n                  ? styles.fairAutoSelected\r\n                  : styles.fairAuto\r\n              }\r\n            >\r\n              Auto\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div style={{ margin: \"10px 0px\" }}>\r\n          <CloseNewAccountsSwitch />\r\n        </div>\r\n        <Button\r\n          variant=\"contained\"\r\n          fullWidth\r\n          disabled={swapClient.program.provider.wallet.publicKey === null}\r\n          onClick={() => setShowSettingsDialog(true)}\r\n        >\r\n          Manage Dex Accounts\r\n        </Button>\r\n      </div>\r\n      <OpenOrdersDialog\r\n        open={showSettingsDialog}\r\n        onClose={() => setShowSettingsDialog(false)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CloseNewAccountsSwitch() {\r\n  const styles = useStyles();\r\n  const { isClosingNewAccounts, setIsClosingNewAccounts } = useSwapContext();\r\n\r\n  return (\r\n    <FormGroup style={{ display: \"none\" }} row>\r\n      <FormControlLabel\r\n        classes={{ label: styles.closeAccountSwitchLabel }}\r\n        labelPlacement=\"start\"\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          marginLeft: 0,\r\n          width: \"100%\",\r\n        }}\r\n        control={\r\n          <Switch\r\n            checked={isClosingNewAccounts}\r\n            onChange={() => setIsClosingNewAccounts(!isClosingNewAccounts)}\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Close new accounts\"\r\n      />\r\n    </FormGroup>\r\n  );\r\n}\r\n","import {\r\n  makeStyles,\r\n  Typography,\r\n  Link,\r\n  Popover,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport { Info } from \"@material-ui/icons\";\r\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport { useTokenMap } from \"../context/TokenList\";\r\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\r\nimport { useMint } from \"../context/Token\";\r\nimport { useRoute, useMarketName, useBbo } from \"../context/Dex\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  infoLabel: {\r\n    marginTop: \"20px\",\r\n    marginBottom: \"20px\",\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n    alignItems: \"center\",\r\n  },\r\n  infoButton: {\r\n    marginLeft: \"5px\",\r\n    padding: 0,\r\n    fontSize: \"14px\",\r\n  },\r\n}));\r\n\r\nexport function InfoLabel() {\r\n  const styles = useStyles();\r\n\r\n  const { fromMint, toMint } = useSwapContext();\r\n  const fromMintInfo = useMint(fromMint);\r\n  const fair = useSwapFair();\r\n\r\n  const tokenMap = useTokenMap();\r\n  let fromTokenInfo = tokenMap.get(fromMint.toString());\r\n  let toTokenInfo = tokenMap.get(toMint.toString());\r\n\r\n  return (\r\n    <div className={styles.infoLabel}>\r\n      <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\r\n        {fair !== undefined && toTokenInfo && fromTokenInfo\r\n          ? `1 ${toTokenInfo.symbol} = ${fair.toFixed(\r\n              fromMintInfo?.decimals\r\n            )} ${fromTokenInfo.symbol}`\r\n          : `-`}\r\n      </Typography>\r\n      <InfoButton />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction InfoButton() {\r\n  const styles = useStyles();\r\n  return (\r\n    <PopupState variant=\"popover\">\r\n      {\r\n        //@ts-ignore\r\n        (popupState) => (\r\n          <div style={{ display: \"flex\" }}>\r\n            <IconButton\r\n              {...bindTrigger(popupState)}\r\n              className={styles.infoButton}\r\n            >\r\n              <Info fontSize=\"small\" />\r\n            </IconButton>\r\n            <Popover\r\n              {...bindPopover(popupState)}\r\n              anchorOrigin={{\r\n                vertical: \"bottom\",\r\n                horizontal: \"left\",\r\n              }}\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              PaperProps={{ style: { borderRadius: \"10px\" } }}\r\n              disableRestoreFocus\r\n            >\r\n              <InfoDetails />\r\n            </Popover>\r\n          </div>\r\n        )\r\n      }\r\n    </PopupState>\r\n  );\r\n}\r\n\r\nfunction InfoDetails() {\r\n  const { fromMint, toMint } = useSwapContext();\r\n  const route = useRoute(fromMint, toMint);\r\n  const tokenMap = useTokenMap();\r\n  const fromMintTicker = tokenMap.get(fromMint.toString())?.symbol;\r\n  const toMintTicker = tokenMap.get(toMint.toString())?.symbol;\r\n  const addresses = [\r\n    { ticker: fromMintTicker, mint: fromMint },\r\n    { ticker: toMintTicker, mint: toMint },\r\n  ];\r\n\r\n  return (\r\n    <div style={{ padding: \"15px\", width: \"250px\" }}>\r\n      <div>\r\n        <Typography\r\n          color=\"textSecondary\"\r\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\r\n        >\r\n          Trade Route\r\n        </Typography>\r\n        {route ? (\r\n          route.map((market: PublicKey) => {\r\n            return <MarketRoute key={market.toString()} market={market} />;\r\n          })\r\n        ) : (\r\n          <Typography color=\"textSecondary\">Route not found</Typography>\r\n        )}\r\n      </div>\r\n      <div style={{ marginTop: \"15px\" }}>\r\n        <Typography\r\n          color=\"textSecondary\"\r\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\r\n        >\r\n          Tokens\r\n        </Typography>\r\n        {addresses.map((address) => {\r\n          return (\r\n            <div\r\n              key={address.mint.toString()}\r\n              style={{\r\n                marginTop: \"5px\",\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n              }}\r\n            >\r\n              <Link\r\n                href={`https://explorer.solana.com/address/${address.mint.toString()}`}\r\n                target=\"_blank\"\r\n                rel=\"noopener\"\r\n              >\r\n                {address.ticker}\r\n              </Link>\r\n              <code style={{ width: \"128px\", overflow: \"hidden\" }}>\r\n                {address.mint.toString()}\r\n              </code>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MarketRoute({ market }: { market: PublicKey }) {\r\n  const marketName = useMarketName(market);\r\n  const bbo = useBbo(market);\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        marginTop: \"5px\",\r\n      }}\r\n    >\r\n      <Link\r\n        href={`https://dex.projectserum.com/#/market/${market.toString()}`}\r\n        target=\"_blank\"\r\n        rel=\"noopener\"\r\n      >\r\n        {marketName}\r\n      </Link>\r\n      <code style={{ marginLeft: \"10px\" }}>\r\n        {bbo && bbo.mid ? bbo.mid.toFixed(6) : \"-\"}\r\n      </code>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport {\r\n  PublicKey,\r\n  Keypair,\r\n  Transaction,\r\n  SystemProgram,\r\n  Signer,\r\n} from \"@solana/web3.js\";\r\nimport { Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { BN, Provider } from \"@project-serum/anchor\";\r\nimport {\r\n  makeStyles,\r\n  Card,\r\n  Button,\r\n  Typography,\r\n  TextField,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport { ExpandMore, ImportExportRounded } from \"@material-ui/icons\";\r\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\r\nimport {\r\n  useDexContext,\r\n  useOpenOrders,\r\n  useRouteVerbose,\r\n  useMarket,\r\n  FEE_MULTIPLIER,\r\n} from \"../context/Dex\";\r\nimport { useTokenMap } from \"../context/TokenList\";\r\nimport { useMint, useOwnedTokenAccount } from \"../context/Token\";\r\nimport { useCanSwap, useReferral } from \"../context/Swap\";\r\nimport TokenDialog from \"./TokenDialog\";\r\nimport { SettingsButton } from \"./Settings\";\r\nimport { InfoLabel } from \"./Info\";\r\nimport { SOL_MINT, WRAPPED_SOL_MINT } from \"../utils/pubkeys\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    width: theme.spacing(50),\r\n    borderRadius: theme.spacing(2),\r\n    boxShadow: \"0px 0px 30px 5px rgba(0,0,0,0.075)\",\r\n    padding: theme.spacing(2),\r\n  },\r\n  tab: {\r\n    width: \"50%\",\r\n  },\r\n  settingsButton: {\r\n    padding: 0,\r\n  },\r\n  swapButton: {\r\n    width: \"100%\",\r\n    borderRadius: theme.spacing(2),\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.primary.contrastText,\r\n    fontSize: 16,\r\n    fontWeight: 700,\r\n    padding: theme.spacing(1.5),\r\n  },\r\n  swapToFromButton: {\r\n    display: \"block\",\r\n    margin: \"10px auto 10px auto\",\r\n    cursor: \"pointer\",\r\n  },\r\n  amountInput: {\r\n    fontSize: 22,\r\n    fontWeight: 600,\r\n  },\r\n  input: {\r\n    textAlign: \"right\",\r\n  },\r\n  swapTokenFormContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    boxShadow: \"0px 0px 15px 2px rgba(33,150,243,0.1)\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    padding: theme.spacing(1),\r\n  },\r\n  swapTokenSelectorContainer: {\r\n    marginLeft: theme.spacing(1),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    width: \"50%\",\r\n  },\r\n  balanceContainer: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    fontSize: \"14px\",\r\n  },\r\n  maxButton: {\r\n    marginLeft: theme.spacing(1),\r\n    color: theme.palette.primary.main,\r\n    fontWeight: 700,\r\n    fontSize: \"12px\",\r\n    cursor: \"pointer\",\r\n  },\r\n  tokenButton: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    cursor: \"pointer\",\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function SwapCard({\r\n  containerStyle,\r\n  contentStyle,\r\n  swapTokenContainerStyle,\r\n}: {\r\n  containerStyle?: any;\r\n  contentStyle?: any;\r\n  swapTokenContainerStyle?: any;\r\n}) {\r\n  const styles = useStyles();\r\n  return (\r\n    <Card className={styles.card} style={containerStyle}>\r\n      <SwapHeader />\r\n      <div style={contentStyle}>\r\n        <SwapFromForm style={swapTokenContainerStyle} />\r\n        <ArrowButton />\r\n        <SwapToForm style={swapTokenContainerStyle} />\r\n        <InfoLabel />\r\n        <SwapButton />\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport function SwapHeader() {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        marginBottom: \"16px\",\r\n      }}\r\n    >\r\n      <Typography\r\n        style={{\r\n          fontSize: 18,\r\n          fontWeight: 700,\r\n        }}\r\n      >\r\n        SWAP\r\n      </Typography>\r\n      <SettingsButton />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function ArrowButton() {\r\n  const styles = useStyles();\r\n  const theme = useTheme();\r\n  const { swapToFromMints } = useSwapContext();\r\n  return (\r\n    <ImportExportRounded\r\n      className={styles.swapToFromButton}\r\n      fontSize=\"large\"\r\n      htmlColor={theme.palette.primary.main}\r\n      onClick={swapToFromMints}\r\n    />\r\n  );\r\n}\r\n\r\nfunction SwapFromForm({ style }: { style?: any }) {\r\n  const { fromMint, setFromMint, fromAmount, setFromAmount } = useSwapContext();\r\n  return (\r\n    <SwapTokenForm\r\n      from\r\n      style={style}\r\n      mint={fromMint}\r\n      setMint={setFromMint}\r\n      amount={fromAmount}\r\n      setAmount={setFromAmount}\r\n    />\r\n  );\r\n}\r\n\r\nfunction SwapToForm({ style }: { style?: any }) {\r\n  const { toMint, setToMint, toAmount, setToAmount } = useSwapContext();\r\n  return (\r\n    <SwapTokenForm\r\n      from={false}\r\n      style={style}\r\n      mint={toMint}\r\n      setMint={setToMint}\r\n      amount={toAmount}\r\n      setAmount={setToAmount}\r\n    />\r\n  );\r\n}\r\n\r\nexport function SwapTokenForm({\r\n  from,\r\n  style,\r\n  mint,\r\n  setMint,\r\n  amount,\r\n  setAmount,\r\n}: {\r\n  from: boolean;\r\n  style?: any;\r\n  mint: PublicKey;\r\n  setMint: (m: PublicKey) => void;\r\n  amount: number;\r\n  setAmount: (a: number) => void;\r\n}) {\r\n  const styles = useStyles();\r\n\r\n  const [showTokenDialog, setShowTokenDialog] = useState(false);\r\n  const tokenAccount = useOwnedTokenAccount(mint);\r\n  const mintAccount = useMint(mint);\r\n\r\n  const balance =\r\n    tokenAccount &&\r\n    mintAccount &&\r\n    tokenAccount.account.amount.toNumber() / 10 ** mintAccount.decimals;\r\n\r\n  const formattedAmount =\r\n    mintAccount && amount\r\n      ? amount.toLocaleString(\"fullwide\", {\r\n          maximumFractionDigits: mintAccount.decimals,\r\n          useGrouping: false,\r\n        })\r\n      : amount;\r\n\r\n  return (\r\n    <div className={styles.swapTokenFormContainer} style={style}>\r\n      <div className={styles.swapTokenSelectorContainer}>\r\n        <TokenButton mint={mint} onClick={() => setShowTokenDialog(true)} />\r\n        <Typography color=\"textSecondary\" className={styles.balanceContainer}>\r\n          {tokenAccount && mintAccount\r\n            ? `Balance: ${balance?.toFixed(mintAccount.decimals)}`\r\n            : `-`}\r\n          {from && !!balance ? (\r\n            <span\r\n              className={styles.maxButton}\r\n              onClick={() => setAmount(balance)}\r\n            >\r\n              MAX\r\n            </span>\r\n          ) : null}\r\n        </Typography>\r\n      </div>\r\n      <TextField\r\n        type=\"number\"\r\n        value={formattedAmount}\r\n        onChange={(e) => setAmount(parseFloat(e.target.value))}\r\n        InputProps={{\r\n          disableUnderline: true,\r\n          classes: {\r\n            root: styles.amountInput,\r\n            input: styles.input,\r\n          },\r\n        }}\r\n      />\r\n      <TokenDialog\r\n        setMint={setMint}\r\n        open={showTokenDialog}\r\n        onClose={() => setShowTokenDialog(false)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TokenButton({\r\n  mint,\r\n  onClick,\r\n}: {\r\n  mint: PublicKey;\r\n  onClick: () => void;\r\n}) {\r\n  const styles = useStyles();\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <div onClick={onClick} className={styles.tokenButton}>\r\n      <TokenIcon mint={mint} style={{ width: theme.spacing(4) }} />\r\n      <TokenName mint={mint} style={{ fontSize: 14, fontWeight: 700 }} />\r\n      <ExpandMore />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TokenIcon({ mint, style }: { mint: PublicKey; style: any }) {\r\n  const tokenMap = useTokenMap();\r\n  let tokenInfo = tokenMap.get(mint.toString());\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      {tokenInfo?.logoURI ? (\r\n        <img alt=\"Logo\" style={style} src={tokenInfo?.logoURI} />\r\n      ) : (\r\n        <div style={style}></div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TokenName({ mint, style }: { mint: PublicKey; style: any }) {\r\n  const tokenMap = useTokenMap();\r\n  const theme = useTheme();\r\n  let tokenInfo = tokenMap.get(mint.toString());\r\n\r\n  return (\r\n    <Typography\r\n      style={{\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(1),\r\n        ...style,\r\n      }}\r\n    >\r\n      {tokenInfo?.symbol}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nexport function SwapButton() {\r\n  const styles = useStyles();\r\n  const {\r\n    fromMint,\r\n    toMint,\r\n    fromAmount,\r\n    slippage,\r\n    isClosingNewAccounts,\r\n    isStrict,\r\n  } = useSwapContext();\r\n  const { swapClient } = useDexContext();\r\n  const fromMintInfo = useMint(fromMint);\r\n  const toMintInfo = useMint(toMint);\r\n  const openOrders = useOpenOrders();\r\n  const route = useRouteVerbose(fromMint, toMint);\r\n  const fromMarket = useMarket(\r\n    route && route.markets ? route.markets[0] : undefined\r\n  );\r\n  const toMarket = useMarket(\r\n    route && route.markets ? route.markets[1] : undefined\r\n  );\r\n  const canSwap = useCanSwap();\r\n  const referral = useReferral(fromMarket);\r\n  const fair = useSwapFair();\r\n  let fromWallet = useOwnedTokenAccount(fromMint);\r\n  let toWallet = useOwnedTokenAccount(toMint);\r\n  const quoteMint = fromMarket && fromMarket.quoteMintAddress;\r\n  const quoteMintInfo = useMint(quoteMint);\r\n  const quoteWallet = useOwnedTokenAccount(quoteMint);\r\n\r\n  // Click handler.\r\n  const sendSwapTransaction = async () => {\r\n    if (!fromMintInfo || !toMintInfo) {\r\n      throw new Error(\"Unable to calculate mint decimals\");\r\n    }\r\n    if (!fair) {\r\n      throw new Error(\"Invalid fair\");\r\n    }\r\n    if (!quoteMint || !quoteMintInfo) {\r\n      throw new Error(\"Quote mint not found\");\r\n    }\r\n\r\n    const amount = new BN(fromAmount * 10 ** fromMintInfo.decimals);\r\n    const isSol = fromMint.equals(SOL_MINT) || toMint.equals(SOL_MINT);\r\n    const wrappedSolAccount = isSol ? Keypair.generate() : undefined;\r\n\r\n    // Build the swap.\r\n    let txs = await (async () => {\r\n      if (!fromMarket) {\r\n        throw new Error(\"Market undefined\");\r\n      }\r\n\r\n      const minExchangeRate = {\r\n        rate: new BN((10 ** toMintInfo.decimals * FEE_MULTIPLIER) / fair)\r\n          .muln(100 - slippage)\r\n          .divn(100),\r\n        fromDecimals: fromMintInfo.decimals,\r\n        quoteDecimals: quoteMintInfo.decimals,\r\n        strict: isStrict,\r\n      };\r\n      const fromOpenOrders = fromMarket\r\n        ? openOrders.get(fromMarket?.address.toString())\r\n        : undefined;\r\n      const toOpenOrders = toMarket\r\n        ? openOrders.get(toMarket?.address.toString())\r\n        : undefined;\r\n      const fromWalletAddr = fromMint.equals(SOL_MINT)\r\n        ? wrappedSolAccount!.publicKey\r\n        : fromWallet\r\n        ? fromWallet.publicKey\r\n        : undefined;\r\n      const toWalletAddr = toMint.equals(SOL_MINT)\r\n        ? wrappedSolAccount!.publicKey\r\n        : toWallet\r\n        ? toWallet.publicKey\r\n        : undefined;\r\n\r\n      return await swapClient.swapTxs({\r\n        fromMint,\r\n        toMint,\r\n        quoteMint,\r\n        amount,\r\n        minExchangeRate,\r\n        referral,\r\n        fromMarket,\r\n        toMarket,\r\n        // Automatically created if undefined.\r\n        fromOpenOrders: fromOpenOrders ? fromOpenOrders[0].address : undefined,\r\n        toOpenOrders: toOpenOrders ? toOpenOrders[0].address : undefined,\r\n        fromWallet: fromWalletAddr,\r\n        toWallet: toWalletAddr,\r\n        quoteWallet: quoteWallet ? quoteWallet.publicKey : undefined,\r\n        // Auto close newly created open orders accounts.\r\n        close: isClosingNewAccounts,\r\n      });\r\n    })();\r\n\r\n    // If swapping SOL, then insert a wrap/unwrap instruction.\r\n    if (isSol) {\r\n      if (txs.length > 1) {\r\n        throw new Error(\"SOL must be swapped in a single transaction\");\r\n      }\r\n      const { tx: wrapTx, signers: wrapSigners } = await wrapSol(\r\n        swapClient.program.provider,\r\n        wrappedSolAccount as Keypair,\r\n        fromMint,\r\n        amount\r\n      );\r\n      const { tx: unwrapTx, signers: unwrapSigners } = unwrapSol(\r\n        swapClient.program.provider,\r\n        wrappedSolAccount as Keypair\r\n      );\r\n      const tx = new Transaction();\r\n      tx.add(wrapTx);\r\n      tx.add(txs[0].tx);\r\n      tx.add(unwrapTx);\r\n      txs[0].tx = tx;\r\n      txs[0].signers.push(...wrapSigners);\r\n      txs[0].signers.push(...unwrapSigners);\r\n    }\r\n\r\n    await swapClient.program.provider.sendAll(txs);\r\n  };\r\n  return (\r\n    <Button\r\n      variant=\"contained\"\r\n      className={styles.swapButton}\r\n      onClick={sendSwapTransaction}\r\n      disabled={!canSwap}\r\n    >\r\n      Swap\r\n    </Button>\r\n  );\r\n}\r\n\r\nasync function wrapSol(\r\n  provider: Provider,\r\n  wrappedSolAccount: Keypair,\r\n  fromMint: PublicKey,\r\n  amount: BN\r\n): Promise<{ tx: Transaction; signers: Array<Signer | undefined> }> {\r\n  const tx = new Transaction();\r\n  const signers = [wrappedSolAccount];\r\n  // Create new, rent exempt account.\r\n  tx.add(\r\n    SystemProgram.createAccount({\r\n      fromPubkey: provider.wallet.publicKey,\r\n      newAccountPubkey: wrappedSolAccount.publicKey,\r\n      lamports: await Token.getMinBalanceRentForExemptAccount(\r\n        provider.connection\r\n      ),\r\n      space: 165,\r\n      programId: TOKEN_PROGRAM_ID,\r\n    })\r\n  );\r\n  // Transfer lamports. These will be converted to an SPL balance by the\r\n  // token program.\r\n  if (fromMint.equals(SOL_MINT)) {\r\n    tx.add(\r\n      SystemProgram.transfer({\r\n        fromPubkey: provider.wallet.publicKey,\r\n        toPubkey: wrappedSolAccount.publicKey,\r\n        lamports: amount.toNumber(),\r\n      })\r\n    );\r\n  }\r\n  // Initialize the account.\r\n  tx.add(\r\n    Token.createInitAccountInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      WRAPPED_SOL_MINT,\r\n      wrappedSolAccount.publicKey,\r\n      provider.wallet.publicKey\r\n    )\r\n  );\r\n  return { tx, signers };\r\n}\r\n\r\nfunction unwrapSol(\r\n  provider: Provider,\r\n  wrappedSolAccount: Keypair\r\n): { tx: Transaction; signers: Array<Signer | undefined> } {\r\n  const tx = new Transaction();\r\n  tx.add(\r\n    Token.createCloseAccountInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      wrappedSolAccount.publicKey,\r\n      provider.wallet.publicKey,\r\n      provider.wallet.publicKey,\r\n      []\r\n    )\r\n  );\r\n  return { tx, signers: [] };\r\n}\r\n","import { ReactElement } from \"react\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport { TokenListContainer } from \"@solana/spl-token-registry\";\r\nimport { Provider } from \"@project-serum/anchor\";\r\nimport { Swap as SwapClient } from \"@project-serum/swap\";\r\nimport {\r\n  createMuiTheme,\r\n  ThemeOptions,\r\n  ThemeProvider,\r\n} from \"@material-ui/core/styles\";\r\nimport {\r\n  SwapContextProvider,\r\n  useSwapContext,\r\n  useSwapFair,\r\n} from \"./context/Swap\";\r\nimport {\r\n  DexContextProvider,\r\n  useBbo,\r\n  useFairRoute,\r\n  useMarketName,\r\n} from \"./context/Dex\";\r\nimport { TokenListContextProvider, useTokenMap } from \"./context/TokenList\";\r\nimport { TokenContextProvider, useMint } from \"./context/Token\";\r\nimport SwapCard, {\r\n  ArrowButton,\r\n  SwapButton,\r\n  SwapHeader,\r\n  SwapTokenForm,\r\n} from \"./components/Swap\";\r\nimport TokenDialog from \"./components/TokenDialog\";\r\n\r\n/**\r\n * A`Swap` component that can be embedded into applications. To use,\r\n * one can, minimally, provide a provider and token list to the component.\r\n * For example,\r\n *\r\n * ```javascript\r\n * <Swap provider={provider} tokenList={tokenList} />\r\n * ```\r\n *\r\n * All of the complexity of communicating with the Serum DEX and managing\r\n * its data is handled internally by the component.\r\n *\r\n * For information on other properties like earning referrals, see the\r\n * [[SwapProps]] documentation.\r\n */\r\nexport default function Swap(props: SwapProps): ReactElement {\r\n  const {\r\n    containerStyle,\r\n    contentStyle,\r\n    swapTokenContainerStyle,\r\n    materialTheme,\r\n    provider,\r\n    tokenList,\r\n    fromMint,\r\n    toMint,\r\n    fromAmount,\r\n    toAmount,\r\n    referral,\r\n  } = props;\r\n  const swapClient = new SwapClient(provider, tokenList);\r\n  const theme = createMuiTheme(\r\n    materialTheme || {\r\n      palette: {\r\n        primary: {\r\n          main: \"#2196F3\",\r\n          contrastText: \"#FFFFFF\",\r\n        },\r\n        secondary: {\r\n          main: \"#E0E0E0\",\r\n          light: \"#595959\",\r\n        },\r\n        error: {\r\n          main: \"#ff6b6b\",\r\n        },\r\n      },\r\n    }\r\n  );\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <TokenListContextProvider tokenList={tokenList}>\r\n        <TokenContextProvider provider={provider}>\r\n          <DexContextProvider swapClient={swapClient}>\r\n            <SwapContextProvider\r\n              fromMint={fromMint}\r\n              toMint={toMint}\r\n              fromAmount={fromAmount}\r\n              toAmount={toAmount}\r\n              referral={referral}\r\n            >\r\n              <SwapCard\r\n                containerStyle={containerStyle}\r\n                contentStyle={contentStyle}\r\n                swapTokenContainerStyle={swapTokenContainerStyle}\r\n              />\r\n            </SwapContextProvider>\r\n          </DexContextProvider>\r\n        </TokenContextProvider>\r\n      </TokenListContextProvider>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\n/**\r\n * Properties for the `Swap` Component.\r\n */\r\nexport type SwapProps = {\r\n  /**\r\n   * Wallet and network provider. Apps can use a `Provider` subclass to hook\r\n   * into all transactions intitiated by the component.\r\n   */\r\n  provider: Provider;\r\n\r\n  /**\r\n   * Token list providing information for tokens used.\r\n   */\r\n  tokenList: TokenListContainer;\r\n\r\n  /**\r\n   * Wallet address to which referral fees are sent (i.e. a SOL address).\r\n   * To receive referral fees, the wallet must *own* associated token\r\n   * accounts for the token in which the referral is paid  (usually USDC\r\n   * or USDT).\r\n   */\r\n  referral?: PublicKey;\r\n\r\n  /**\r\n   * The default `fromMint` to use when the component first renders.\r\n   */\r\n  fromMint?: PublicKey;\r\n\r\n  /**\r\n   * The default `toMint` to use when the component first renders.\r\n   */\r\n  toMint?: PublicKey;\r\n\r\n  /**\r\n   * The initial amount for the `fromMint` to use when the component first\r\n   * renders.\r\n   */\r\n  fromAmount?: number;\r\n\r\n  /**\r\n   * The initial amount for the `toMint` to use when the component first\r\n   * renders.\r\n   */\r\n  toAmount?: number;\r\n\r\n  /**\r\n   * Provide custom material-ui theme.\r\n   */\r\n  materialTheme?: ThemeOptions;\r\n\r\n  /**\r\n   * Styling properties for the main container.\r\n   */\r\n  containerStyle?: any;\r\n\r\n  /**\r\n   * Styling properties for the content container.\r\n   */\r\n  contentStyle?: any;\r\n\r\n  /**\r\n   * Styling properties for the from and to token containers.\r\n   */\r\n  swapTokenContainerStyle?: any;\r\n};\r\n\r\nexport {\r\n  // Components.\r\n  Swap,\r\n  SwapCard,\r\n  SwapHeader,\r\n  SwapTokenForm,\r\n  ArrowButton,\r\n  SwapButton,\r\n  TokenDialog,\r\n  // Providers and context.\r\n  // Swap.\r\n  SwapContextProvider,\r\n  useSwapContext,\r\n  useSwapFair,\r\n  // TokenList.\r\n  TokenListContextProvider,\r\n  useTokenMap,\r\n  // Token.\r\n  TokenContextProvider,\r\n  useMint,\r\n  // Dex.\r\n  DexContextProvider,\r\n  useFairRoute,\r\n  useMarketName,\r\n  useBbo,\r\n};\r\n","import \"@fontsource/roboto\";\r\nimport { useState, useEffect, useMemo } from \"react\";\r\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\r\nimport { Button, Grid, makeStyles } from \"@material-ui/core\";\r\nimport { Provider } from \"@project-serum/anchor\";\r\n// @ts-ignore\r\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\r\nimport {\r\n  Signer,\r\n  ConfirmOptions,\r\n  Connection,\r\n  Transaction,\r\n  TransactionSignature,\r\n} from \"@solana/web3.js\";\r\nimport {\r\n  TokenListContainer,\r\n  TokenListProvider,\r\n} from \"@solana/spl-token-registry\";\r\nimport Swap from \"@project-serum/swap-ui\";\r\nimport \"./App.css\";\r\n\r\n// App illustrating the use of the Swap component.\r\n//\r\n// One needs to just provide an Anchor `Provider` and a `TokenListContainer`\r\n// to the `Swap` component, and then everything else is taken care of.\r\nfunction App() {\r\n  return (\r\n    <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\r\n      <AppInner />\r\n    </SnackbarProvider>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: \"100vh\",\r\n    paddingLeft: theme.spacing(1),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction AppInner() {\r\n  const styles = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [tokenList, setTokenList] = useState<TokenListContainer | null>(null);\r\n\r\n  const [provider, wallet] = useMemo(() => {\r\n    const opts: ConfirmOptions = {\r\n      preflightCommitment: \"recent\",\r\n      commitment: \"recent\",\r\n    };\r\n    const network = \"https://solana-api.projectserum.com\";\r\n    const wallet = new Wallet(\"https://www.sollet.io\", network);\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new NotifyingProvider(\r\n      connection,\r\n      wallet,\r\n      opts,\r\n      (tx, err) => {\r\n        if (err) {\r\n          enqueueSnackbar(`Error: ${err.toString()}`, {\r\n            variant: \"error\",\r\n          });\r\n        } else {\r\n          enqueueSnackbar(\"Transaction sent\", {\r\n            variant: \"success\",\r\n            action: (\r\n              <Button\r\n                color=\"inherit\"\r\n                component=\"a\"\r\n                target=\"_blank\"\r\n                rel=\"noopener\"\r\n                href={`https://explorer.solana.com/tx/${tx}`}\r\n              >\r\n                View on Solana Explorer\r\n              </Button>\r\n            ),\r\n          });\r\n        }\r\n      }\r\n    );\r\n    return [provider, wallet];\r\n  }, [enqueueSnackbar]);\r\n\r\n  useEffect(() => {\r\n    new TokenListProvider().resolve().then(setTokenList);\r\n  }, [setTokenList]);\r\n\r\n  // Connect to the wallet.\r\n  useEffect(() => {\r\n    wallet.on(\"connect\", () => {\r\n      enqueueSnackbar(\"Wallet connected\", { variant: \"success\" });\r\n      setIsConnected(true);\r\n    });\r\n    wallet.on(\"disconnect\", () => {\r\n      enqueueSnackbar(\"Wallet disconnected\", { variant: \"info\" });\r\n      setIsConnected(false);\r\n    });\r\n  }, [wallet, enqueueSnackbar]);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      className={styles.root}\r\n    >\r\n      <Button\r\n        variant=\"outlined\"\r\n        onClick={() => (!isConnected ? wallet.connect() : wallet.disconnect())}\r\n        style={{ position: \"fixed\", right: 24, top: 24 }}\r\n      >\r\n        {!isConnected ? \"Connect\" : \"Disconnect\"}\r\n      </Button>\r\n      {tokenList && <Swap provider={provider} tokenList={tokenList} />}\r\n    </Grid>\r\n  );\r\n}\r\n\r\n// Custom provider to display notifications whenever a transaction is sent.\r\n//\r\n// Note that this is an Anchor wallet/network provider--not a React provider,\r\n// so all transactions will be flowing through here, which allows us to\r\n// hook in to display all transactions sent from the `Swap` component\r\n// as notifications in the parent app.\r\nclass NotifyingProvider extends Provider {\r\n  // Function to call whenever the provider sends a transaction;\r\n  private onTransaction: (\r\n    tx: TransactionSignature | undefined,\r\n    err?: Error\r\n  ) => void;\r\n\r\n  constructor(\r\n    connection: Connection,\r\n    wallet: Wallet,\r\n    opts: ConfirmOptions,\r\n    onTransaction: (tx: TransactionSignature | undefined, err?: Error) => void\r\n  ) {\r\n    super(connection, wallet, opts);\r\n    this.onTransaction = onTransaction;\r\n  }\r\n\r\n  async send(\r\n    tx: Transaction,\r\n    signers?: Array<Signer | undefined>,\r\n    opts?: ConfirmOptions\r\n  ): Promise<TransactionSignature> {\r\n    try {\r\n      const txSig = await super.send(tx, signers, opts);\r\n      this.onTransaction(txSig);\r\n      return txSig;\r\n    } catch (err) {\r\n      this.onTransaction(undefined, err);\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  async sendAll(\r\n    txs: Array<{ tx: Transaction; signers: Array<Signer | undefined> }>,\r\n    opts?: ConfirmOptions\r\n  ): Promise<Array<TransactionSignature>> {\r\n    try {\r\n      const txSigs = await super.sendAll(txs, opts);\r\n      txSigs.forEach((sig) => {\r\n        this.onTransaction(sig);\r\n      });\r\n      return txSigs;\r\n    } catch (err) {\r\n      this.onTransaction(undefined, err);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}